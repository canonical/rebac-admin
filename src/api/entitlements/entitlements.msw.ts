/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

#### Changelog
| Version | Notes |
|---|---|
| **0.0.8** | Implement response type as defined in [IAM Platform Admin UI HTTP Spec](https://docs.google.com/document/d/1ElV22e3mePGFPq8CaM3F3IkuyuOLNpjG7yYgtjvygf4/edit). |
| **0.0.7** | Added `/entitlements/raw` endpoint to split `/entitlements` responses. |
| **0.0.6** | Ensured compatibility with Orval Restful Client Generator. |
| **0.0.5** | Add filter parameter to top level collection `GET` requests. |
| **0.0.4** | Added pagination parameters to appropriate `GET` requests.<br />Changed a couple of `PUT`'s to `PATCH`'s to account for the possible subset returned from the paginated `GET`'s. |
| **0.0.3** | Added skeleton error responses for `400`, `401`, `404`, and `5XX` (`default`) |
| **0.0.2** | Added `GET /users/{id}/groups`<br />Added `GET /users/{id}roles`<br />Added `GET /users/{id}/entitlements`<br />Added `GET,PUT /groups/{id}/users`<br>Added `DELETE /groups/{id}/users/{userId}`<br />Added `GET /roles/{id}/entitlements`<br />Added `DELETE /roles/{id}/entitlements/{entitlementId}` |
| **0.0.1** | Initial dump |

 * OpenAPI spec version: 0.0.8
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";

import type {
  BadRequestResponse,
  DefaultResponse,
  GetEntitlements200,
  NotFoundResponse,
  UnauthorizedResponse,
} from "../api.schemas";

export const getGetEntitlementsResponseMock = (
  overrideResponse: any = {},
): GetEntitlements200 => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    entitlement: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    entity: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getGetEntitlementsResponseMock200 = (
  overrideResponse: any = {},
): GetEntitlements200 => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    entitlement: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    entity: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getGetEntitlementsResponseMock400 = (
  overrideResponse: any = {},
): BadRequestResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetEntitlementsResponseMock401 = (
  overrideResponse: any = {},
): UnauthorizedResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetEntitlementsResponseMock404 = (
  overrideResponse: any = {},
): NotFoundResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetEntitlementsResponseMockDefault = (
  overrideResponse: any = {},
): DefaultResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetEntitlementsRawResponseMock = (): string =>
  faker.word.sample();

export const getGetEntitlementsRawResponseMock200 = (): string =>
  faker.word.sample();

export const getGetEntitlementsRawResponseMock400 = (
  overrideResponse: any = {},
): BadRequestResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetEntitlementsRawResponseMock401 = (
  overrideResponse: any = {},
): UnauthorizedResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetEntitlementsRawResponseMock404 = (
  overrideResponse: any = {},
): NotFoundResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetEntitlementsRawResponseMockDefault = (
  overrideResponse: any = {},
): DefaultResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPutEntitlementsRawResponseMock = (): string =>
  faker.word.sample();

export const getPutEntitlementsRawResponseMock200 = (): string =>
  faker.word.sample();

export const getPutEntitlementsRawResponseMock400 = (
  overrideResponse: any = {},
): BadRequestResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPutEntitlementsRawResponseMock401 = (
  overrideResponse: any = {},
): UnauthorizedResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPutEntitlementsRawResponseMock404 = (
  overrideResponse: any = {},
): NotFoundResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPutEntitlementsRawResponseMockDefault = (
  overrideResponse: any = {},
): DefaultResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetEntitlementsMockHandler = (
  overrideResponse?: GetEntitlements200,
) => {
  return http.get("*/entitlements", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetEntitlementsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetEntitlementsMockHandler200 = (
  overrideResponse?: GetEntitlements200,
) => {
  return http.get("*/entitlements", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEntitlementsResponseMock200(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetEntitlementsMockHandler400 = (
  overrideResponse?: BadRequestResponse,
) => {
  return http.get("*/entitlements", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEntitlementsResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetEntitlementsMockHandler401 = (
  overrideResponse?: UnauthorizedResponse,
) => {
  return http.get("*/entitlements", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEntitlementsResponseMock401(),
      ),
      {
        status: 401,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetEntitlementsMockHandler404 = (
  overrideResponse?: NotFoundResponse,
) => {
  return http.get("*/entitlements", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEntitlementsResponseMock404(),
      ),
      {
        status: 404,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetEntitlementsMockHandlerDefault = (
  overrideResponse?: DefaultResponse,
) => {
  return http.get("*/entitlements", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEntitlementsResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetEntitlementsRawMockHandler = () => {
  return http.get("*/entitlements/raw", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(getGetEntitlementsRawResponseMock(), {
      status: 200,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  });
};

export const getGetEntitlementsRawMockHandler200 = () => {
  return http.get("*/entitlements/raw", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(getGetEntitlementsRawResponseMock200(), {
      status: 200,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  });
};

export const getGetEntitlementsRawMockHandler400 = (
  overrideResponse?: BadRequestResponse,
) => {
  return http.get("*/entitlements/raw", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEntitlementsRawResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetEntitlementsRawMockHandler401 = (
  overrideResponse?: UnauthorizedResponse,
) => {
  return http.get("*/entitlements/raw", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEntitlementsRawResponseMock401(),
      ),
      {
        status: 401,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetEntitlementsRawMockHandler404 = (
  overrideResponse?: NotFoundResponse,
) => {
  return http.get("*/entitlements/raw", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEntitlementsRawResponseMock404(),
      ),
      {
        status: 404,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetEntitlementsRawMockHandlerDefault = (
  overrideResponse?: DefaultResponse,
) => {
  return http.get("*/entitlements/raw", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetEntitlementsRawResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPutEntitlementsRawMockHandler = () => {
  return http.put("*/entitlements/raw", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(getPutEntitlementsRawResponseMock(), {
      status: 200,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  });
};

export const getPutEntitlementsRawMockHandler200 = () => {
  return http.put("*/entitlements/raw", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(getPutEntitlementsRawResponseMock200(), {
      status: 200,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  });
};

export const getPutEntitlementsRawMockHandler400 = (
  overrideResponse?: BadRequestResponse,
) => {
  return http.put("*/entitlements/raw", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getPutEntitlementsRawResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPutEntitlementsRawMockHandler401 = (
  overrideResponse?: UnauthorizedResponse,
) => {
  return http.put("*/entitlements/raw", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getPutEntitlementsRawResponseMock401(),
      ),
      {
        status: 401,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPutEntitlementsRawMockHandler404 = (
  overrideResponse?: NotFoundResponse,
) => {
  return http.put("*/entitlements/raw", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getPutEntitlementsRawResponseMock404(),
      ),
      {
        status: 404,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPutEntitlementsRawMockHandlerDefault = (
  overrideResponse?: DefaultResponse,
) => {
  return http.put("*/entitlements/raw", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getPutEntitlementsRawResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getEntitlementsMock = () => [
  getGetEntitlementsMockHandler(),
  getGetEntitlementsRawMockHandler(),
  getPutEntitlementsRawMockHandler(),
];
