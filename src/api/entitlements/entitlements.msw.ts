/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

 * OpenAPI spec version: 0.0.10
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";

import type { GetEntitlementsResponse } from "../api.schemas";

export const getGetEntitlementsResponseMock = (
  overrideResponse: any = {},
): GetEntitlementsResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    entitlement_type: faker.word.sample(),
    entity_name: faker.word.sample(),
    entity_type: faker.word.sample(),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getGetRawEntitlementsResponseMock = (): string =>
  faker.word.sample();

export const getGetEntitlementsMockHandler = (
  overrideResponse?: GetEntitlementsResponse,
) => {
  return http.get("*/entitlements", async () => {
    await delay(900);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetEntitlementsResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetRawEntitlementsMockHandler = () => {
  return http.get("*/entitlements/raw", async () => {
    await delay(900);
    return new HttpResponse(getGetRawEntitlementsResponseMock(), {
      status: 200,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  });
};
export const getEntitlementsMock = () => [
  getGetEntitlementsMockHandler(),
  getGetRawEntitlementsMockHandler(),
];
