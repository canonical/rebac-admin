/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

#### Changelog
| Version | Notes |
|---|---|
| **0.0.8** | Implement response type as defined in [IAM Platform Admin UI HTTP Spec](https://docs.google.com/document/d/1ElV22e3mePGFPq8CaM3F3IkuyuOLNpjG7yYgtjvygf4/edit). |
| **0.0.7** | Added `/entitlements/raw` endpoint to split `/entitlements` responses. |
| **0.0.6** | Ensured compatibility with Orval Restful Client Generator. |
| **0.0.5** | Add filter parameter to top level collection `GET` requests. |
| **0.0.4** | Added pagination parameters to appropriate `GET` requests.<br />Changed a couple of `PUT`'s to `PATCH`'s to account for the possible subset returned from the paginated `GET`'s. |
| **0.0.3** | Added skeleton error responses for `400`, `401`, `404`, and `5XX` (`default`) |
| **0.0.2** | Added `GET /users/{id}/groups`<br />Added `GET /users/{id}roles`<br />Added `GET /users/{id}/entitlements`<br />Added `GET,PUT /groups/{id}/users`<br>Added `DELETE /groups/{id}/users/{userId}`<br />Added `GET /roles/{id}/entitlements`<br />Added `DELETE /roles/{id}/entitlements/{entitlementId}` |
| **0.0.1** | Initial dump |

 * OpenAPI spec version: 0.0.8
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";

import type {
  BadRequestResponse,
  DefaultResponse,
  GetAuthenticationId200,
  NotFoundResponse,
  UnauthorizedResponse,
} from "../api.schemas";

export const getGetAuthenticationIdResponseMock = (
  overrideResponse: any = {},
): GetAuthenticationId200 => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    acceptsPromptNone: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    accountLinkingOnly: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    disableUserInfo: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    storeTokens: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    storeTokensReadable: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    syncMode: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["import"] as const),
      undefined,
    ]),
    trustEmail: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    userCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getGetAuthenticationIdResponseMock200 = (
  overrideResponse: any = {},
): GetAuthenticationId200 => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    acceptsPromptNone: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    accountLinkingOnly: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    disableUserInfo: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    storeTokens: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    storeTokensReadable: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    syncMode: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["import"] as const),
      undefined,
    ]),
    trustEmail: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    userCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getGetAuthenticationIdResponseMock400 = (
  overrideResponse: any = {},
): BadRequestResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetAuthenticationIdResponseMock401 = (
  overrideResponse: any = {},
): UnauthorizedResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetAuthenticationIdResponseMock404 = (
  overrideResponse: any = {},
): NotFoundResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetAuthenticationIdResponseMockDefault = (
  overrideResponse: any = {},
): DefaultResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPatchAuthenticationIdResponseMock400 = (
  overrideResponse: any = {},
): BadRequestResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPatchAuthenticationIdResponseMock401 = (
  overrideResponse: any = {},
): UnauthorizedResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPatchAuthenticationIdResponseMock404 = (
  overrideResponse: any = {},
): NotFoundResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPatchAuthenticationIdResponseMockDefault = (
  overrideResponse: any = {},
): DefaultResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getDeleteAuthenticationIdResponseMock400 = (
  overrideResponse: any = {},
): BadRequestResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getDeleteAuthenticationIdResponseMock401 = (
  overrideResponse: any = {},
): UnauthorizedResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getDeleteAuthenticationIdResponseMock404 = (
  overrideResponse: any = {},
): NotFoundResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getDeleteAuthenticationIdResponseMockDefault = (
  overrideResponse: any = {},
): DefaultResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getGetAuthenticationIdMockHandler = (
  overrideResponse?: GetAuthenticationId200,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetAuthenticationIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAuthenticationIdMockHandler200 = (
  overrideResponse?: GetAuthenticationId200,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetAuthenticationIdResponseMock200(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAuthenticationIdMockHandler400 = (
  overrideResponse?: BadRequestResponse,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetAuthenticationIdResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAuthenticationIdMockHandler401 = (
  overrideResponse?: UnauthorizedResponse,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetAuthenticationIdResponseMock401(),
      ),
      {
        status: 401,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAuthenticationIdMockHandler404 = (
  overrideResponse?: NotFoundResponse,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetAuthenticationIdResponseMock404(),
      ),
      {
        status: 404,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetAuthenticationIdMockHandlerDefault = (
  overrideResponse?: DefaultResponse,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetAuthenticationIdResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPatchAuthenticationIdMockHandler = () => {
  return http.patch("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getPatchAuthenticationIdMockHandler200 = () => {
  return http.patch("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getPatchAuthenticationIdMockHandler400 = (
  overrideResponse?: BadRequestResponse,
) => {
  return http.patch("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getPatchAuthenticationIdResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPatchAuthenticationIdMockHandler401 = (
  overrideResponse?: UnauthorizedResponse,
) => {
  return http.patch("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getPatchAuthenticationIdResponseMock401(),
      ),
      {
        status: 401,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPatchAuthenticationIdMockHandler404 = (
  overrideResponse?: NotFoundResponse,
) => {
  return http.patch("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getPatchAuthenticationIdResponseMock404(),
      ),
      {
        status: 404,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPatchAuthenticationIdMockHandlerDefault = (
  overrideResponse?: DefaultResponse,
) => {
  return http.patch("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getPatchAuthenticationIdResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDeleteAuthenticationIdMockHandler = () => {
  return http.delete("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getDeleteAuthenticationIdMockHandler200 = () => {
  return http.delete("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getDeleteAuthenticationIdMockHandler400 = (
  overrideResponse?: BadRequestResponse,
) => {
  return http.delete("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getDeleteAuthenticationIdResponseMock400(),
      ),
      {
        status: 400,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDeleteAuthenticationIdMockHandler401 = (
  overrideResponse?: UnauthorizedResponse,
) => {
  return http.delete("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getDeleteAuthenticationIdResponseMock401(),
      ),
      {
        status: 401,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDeleteAuthenticationIdMockHandler404 = (
  overrideResponse?: NotFoundResponse,
) => {
  return http.delete("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getDeleteAuthenticationIdResponseMock404(),
      ),
      {
        status: 404,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDeleteAuthenticationIdMockHandlerDefault = (
  overrideResponse?: DefaultResponse,
) => {
  return http.delete("*/authentication/:id", async () => {
    await delay((() => (process.env.NODE_ENV === "development" ? 1e3 : 10))());
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getDeleteAuthenticationIdResponseMockDefault(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getAuthenticationIdMock = () => [
  getGetAuthenticationIdMockHandler(),
  getPatchAuthenticationIdMockHandler(),
  getDeleteAuthenticationIdMockHandler(),
];
