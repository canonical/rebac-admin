/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

 * OpenAPI spec version: 0.0.10
 */
export type GetAuthenticationProviders200AllOfDataItem = { [key: string]: any };

export type GetAuthenticationProviders200AllOf = {
  data: GetAuthenticationProviders200AllOfDataItem[];
};

export type GetAuthenticationProviders200 = Response &
  GetAuthenticationProviders200AllOf;

/**
 * A string to filter results by
 */
export type FilterParamParameter = string;

/**
 * The continuation token to retrieve the next set of results
 */
export type PaginationNextTokenParameter = string;

/**
 * The record offset to return results from
 */
export type PaginationPageParameter = number;

/**
 * The number of records to return per response
 */
export type PaginationSizeParameter = number;

export type GetResourcesParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
  entityType?: string;
};

export type GetEntitlementsParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
  /**
   * A string to filter results by
   */
  filter?: FilterParamParameter;
};

export type GetRolesItemEntitlementsParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetRolesParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
  /**
   * A string to filter results by
   */
  filter?: FilterParamParameter;
};

export type GetGroupsItemEntitlementsParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetGroupsItemRolesParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetGroupsItemIdentitiesParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetGroupsParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
  /**
   * A string to filter results by
   */
  filter?: FilterParamParameter;
};

export type GetIdentitiesItemEntitlementsParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetIdentitiesItemRolesParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetIdentitiesItemGroupsParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetIdentitiesParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
  /**
   * A string to filter results by
   */
  filter?: FilterParamParameter;
};

export type GetAuthenticationParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetAuthenticationProvidersParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

/**
 * Unexpected error
 */
export type DefaultResponse = Response;

/**
 * Not found
 */
export type NotFoundResponse = Response;

/**
 * Unauthorized
 */
export type UnauthorizedResponse = Response;

/**
 * Bad Request
 */
export type BadRequestResponse = Response;

export type GetResourcesResponse = Response & Resources;

export type GetEntitlementsResponseAllOf = {
  data: EntityEntitlement[];
};

export type GetEntitlementsResponse = Response & GetEntitlementsResponseAllOf;

export type GetRoleEntitlementsResponseAllOf = {
  data: EntityEntitlement[];
};

export type GetRoleEntitlementsResponse = Response &
  GetRoleEntitlementsResponseAllOf;

export type GetRolesResponse = Response & Roles;

export type GetGroupEntitlementsResponseAllOf = {
  data: EntityEntitlement[];
};

export type GetGroupEntitlementsResponse = Response &
  GetGroupEntitlementsResponseAllOf;

export type PatchGroupRolesResponse = Response & Roles;

export type GetGroupRolesResponse = Response & Roles;

export type PatchGroupIdentitiesResponse = Response & Identities;

export type GetGroupIdentitiesResponse = Response & Identities;

export type GetGroupsResponse = Response & Groups;

export type GetIdentityEntitlementsResponseAllOf = {
  data: EntityEntitlement[];
};

export type GetIdentityEntitlementsResponse = Response &
  GetIdentityEntitlementsResponseAllOf;

export type GetIdentityRolesResponse = Response & Roles;

export type GetIdentityGroupsResponse = Response & Groups;

export type GetIdentitiesResponse = Response & Identities;

export type GetIdentityProvidersResponseAllOfDataItem = {
  id: string;
  name: string;
};

export type GetIdentityProvidersResponseAllOf = {
  data: GetIdentityProvidersResponseAllOfDataItem[];
};

export type GetIdentityProvidersResponse = Response &
  GetIdentityProvidersResponseAllOf;

export type GetCapabilitiesResponse = Response & Capabilities;

export type IdentityProviderPatchRequestBodyAllOfItem = {
  value: IdentityProvider[];
};

export type IdentityProviderPatchRequestBody = PatchRequestBody &
  IdentityProviderPatchRequestBodyAllOfItem[];

export type RoleEntitlementsPatchItem = EntityEntitlementItem &
  RoleEntitlementsPatchItemAllOf;

export type RoleEntitlementsPatchItemAllOfOp =
  (typeof RoleEntitlementsPatchItemAllOfOp)[keyof typeof RoleEntitlementsPatchItemAllOfOp];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoleEntitlementsPatchItemAllOfOp = {
  add: "add",
  remove: "remove",
} as const;

export type RoleEntitlementsPatchItemAllOf = {
  op: RoleEntitlementsPatchItemAllOfOp;
};

export interface RoleEntitlementsPatchRequestBody {
  patches: RoleEntitlementsPatchItem[];
}

export type GroupEntitlementsPatchItemAllOfOp =
  (typeof GroupEntitlementsPatchItemAllOfOp)[keyof typeof GroupEntitlementsPatchItemAllOfOp];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GroupEntitlementsPatchItemAllOfOp = {
  add: "add",
  remove: "remove",
} as const;

export type GroupEntitlementsPatchItemAllOf = {
  op: GroupEntitlementsPatchItemAllOfOp;
};

export type GroupEntitlementsPatchItem = EntityEntitlementItem &
  GroupEntitlementsPatchItemAllOf;

export interface GroupEntitlementsPatchRequestBody {
  patches: GroupEntitlementsPatchItem[];
}

export type GroupRolesPatchItemOp =
  (typeof GroupRolesPatchItemOp)[keyof typeof GroupRolesPatchItemOp];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GroupRolesPatchItemOp = {
  add: "add",
  remove: "remove",
} as const;

export interface GroupRolesPatchItem {
  op: GroupRolesPatchItemOp;
  role: string;
}

export interface GroupRolesPatchRequestBody {
  patches: GroupRolesPatchItem[];
}

export type GroupIdentitiesPatchItemOp =
  (typeof GroupIdentitiesPatchItemOp)[keyof typeof GroupIdentitiesPatchItemOp];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GroupIdentitiesPatchItemOp = {
  add: "add",
  remove: "remove",
} as const;

export interface GroupIdentitiesPatchItem {
  identity: string;
  op: GroupIdentitiesPatchItemOp;
}

export interface GroupIdentitiesPatchRequestBody {
  patches: GroupIdentitiesPatchItem[];
}

export interface EntityEntitlement {
  entitlement_type: string;
  entity_name: string;
  entity_type: string;
}

export interface EntityEntitlementItem {
  entitlement: EntityEntitlement;
}

export type IdentityEntitlementsPatchItemAllOfOp =
  (typeof IdentityEntitlementsPatchItemAllOfOp)[keyof typeof IdentityEntitlementsPatchItemAllOfOp];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdentityEntitlementsPatchItemAllOfOp = {
  add: "add",
  remove: "remove",
} as const;

export type IdentityEntitlementsPatchItemAllOf = {
  op: IdentityEntitlementsPatchItemAllOfOp;
};

export type IdentityEntitlementsPatchItem = EntityEntitlementItem &
  IdentityEntitlementsPatchItemAllOf;

export interface IdentityEntitlementsPatchRequestBody {
  patches: IdentityEntitlementsPatchItem[];
}

export type IdentityRolesPatchItemOp =
  (typeof IdentityRolesPatchItemOp)[keyof typeof IdentityRolesPatchItemOp];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdentityRolesPatchItemOp = {
  add: "add",
  remove: "remove",
} as const;

export interface IdentityRolesPatchItem {
  op: IdentityRolesPatchItemOp;
  role: string;
}

export interface IdentityRolesPatchRequestBody {
  patches: IdentityRolesPatchItem[];
}

export type IdentityGroupsPatchItemOp =
  (typeof IdentityGroupsPatchItemOp)[keyof typeof IdentityGroupsPatchItemOp];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdentityGroupsPatchItemOp = {
  add: "add",
  remove: "remove",
} as const;

export interface IdentityGroupsPatchItem {
  group: string;
  op: IdentityGroupsPatchItemOp;
}

export interface IdentityGroupsPatchRequestBody {
  patches: IdentityGroupsPatchItem[];
}

export type PatchRequestBodyItemOp =
  (typeof PatchRequestBodyItemOp)[keyof typeof PatchRequestBodyItemOp];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchRequestBodyItemOp = {
  add: "add",
  remove: "remove",
} as const;

export interface PatchRequestBodyElementValueItem {
  id: string;
}

export type PatchRequestBodyElementValue = PatchRequestBodyElementValueItem[];

export type PatchRequestBodyItem = {
  op: PatchRequestBodyItemOp;
  value: PatchRequestBodyElementValue;
};

export type PatchRequestBody = PatchRequestBodyItem[];

export type CapabilityMethodsItem =
  (typeof CapabilityMethodsItem)[keyof typeof CapabilityMethodsItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CapabilityMethodsItem = {
  GET: "GET",
  POST: "POST",
  DELETE: "DELETE",
  PATCH: "PATCH",
} as const;

export interface Capability {
  endpoint: string;
  methods: CapabilityMethodsItem[];
}

export interface Capabilities {
  data: Capability[];
}

export interface ResponseLinksNext {
  href: string;
}

export interface ResponseLinks {
  next: ResponseLinksNext;
}

export interface ResponseMeta {
  page?: number;
  pageToken?: string;
  size: number;
  total?: number;
}

export interface Response {
  _links: ResponseLinks;
  _meta: ResponseMeta;
  message: string;
  status: number;
}

export interface Resources {
  data: Resource[];
}

export interface Entity {
  [key: string]: any;
}

export interface Resource {
  entity: Entity;
  id: string;
  name: string;
  parent?: Resource;
}

export interface RoleEntitlement {
  entitlement?: string;
  entity?: Entity;
  resource?: string;
}

export interface Role {
  entitlements?: RoleEntitlement[];
  id?: string;
  name: string;
}

export interface Roles {
  data: Role[];
}

export interface Group {
  id?: string;
  name: string;
}

export interface Groups {
  data: Group[];
}

export interface Identity {
  addedBy: string;
  certificate?: string;
  email: string;
  firstName?: string;
  groups?: number;
  id?: string;
  joined?: string;
  lastLogin?: string;
  lastName?: string;
  permissions?: number;
  roles?: number;
  source: string;
}

export interface Identities {
  data: Identity[];
}

export type IdentityProviderSyncMode =
  (typeof IdentityProviderSyncMode)[keyof typeof IdentityProviderSyncMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdentityProviderSyncMode = {
  import: "import",
} as const;

export interface IdentityProvider {
  acceptsPromptNone?: boolean;
  accountLinkingOnly?: boolean;
  clientID?: string;
  clientSecret?: string;
  disableIdentityInfo?: boolean;
  enabled?: boolean;
  id?: string;
  identityCount?: number;
  name?: string;
  redirectUrl?: string;
  storeTokens?: boolean;
  storeTokensReadable?: boolean;
  syncMode?: IdentityProviderSyncMode;
  trustEmail?: boolean;
}

export interface IdentityProviders {
  data: IdentityProvider[];
}
