/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

 * OpenAPI spec version: 0.0.10
 */
/**
 * A string to filter results by
 */
export type FilterParamParameter = string;

export type GetEntitlementsParams = {
  /**
   * A string to filter results by
   */
  filter?: FilterParamParameter;
};

/**
 * The continuation token to retrieve the next set of results
 */
export type PaginationNextTokenParameter = string;

/**
 * The record offset to return results from
 */
export type PaginationPageParameter = number;

/**
 * The number of records to return per response
 */
export type PaginationSizeParameter = number;

export type GetResourcesParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
  entityType?: string;
  entityName?: string;
};

export type GetRolesItemEntitlementsParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetRolesParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
  /**
   * A string to filter results by
   */
  filter?: FilterParamParameter;
};

export type GetGroupsItemEntitlementsParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetGroupsItemRolesParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetGroupsItemIdentitiesParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetGroupsParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
  /**
   * A string to filter results by
   */
  filter?: FilterParamParameter;
};

export type GetIdentitiesItemEntitlementsParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetIdentitiesItemRolesParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetIdentitiesItemGroupsParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetIdentitiesParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
  /**
   * A string to filter results by
   */
  filter?: FilterParamParameter;
};

export type GetIdentityProvidersParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

export type GetAvailableIdentityProvidersParams = {
  /**
   * The number of records to return per response
   */
  size?: PaginationSizeParameter;
  /**
   * The record offset to return results from
   */
  page?: PaginationPageParameter;
  /**
   * The continuation token to retrieve the next set of results
   */
  nextToken?: PaginationNextTokenParameter;
};

/**
 * Unexpected error
 */
export type DefaultResponse = Response;

/**
 * Not found
 */
export type NotFoundResponse = Response;

/**
 * Unauthorized
 */
export type UnauthorizedResponse = Response;

/**
 * Bad Request
 */
export type BadRequestResponse = Response;

export type GetResourcesResponse = Response & Resources;

export type GetEntitlementsResponseAllOf = {
  data: EntitlementSchema[];
};

export type GetEntitlementsResponse = Response & GetEntitlementsResponseAllOf;

export type GetRoleEntitlementsResponseAllOf = {
  data: EntityEntitlement[];
};

export type GetRoleEntitlementsResponse = Response &
  GetRoleEntitlementsResponseAllOf;

export type GetRolesResponse = Response & Roles;

export type GetGroupEntitlementsResponseAllOf = {
  data: EntityEntitlement[];
};

export type GetGroupEntitlementsResponse = Response &
  GetGroupEntitlementsResponseAllOf;

export type PatchGroupRolesResponse = Response & Roles;

export type GetGroupRolesResponse = Response & Roles;

export type PatchGroupIdentitiesResponse = Response & Identities;

export type GetGroupIdentitiesResponse = Response & Identities;

export type GetGroupsResponse = Response & Groups;

export type GetIdentityEntitlementsResponseAllOf = {
  data: EntityEntitlement[];
};

export type GetIdentityEntitlementsResponse = Response &
  GetIdentityEntitlementsResponseAllOf;

export type GetIdentityRolesResponse = Response & Roles;

export type GetIdentityGroupsResponse = Response & Groups;

export type GetIdentitiesResponse = Response & Identities;

export type GetIdentityProvidersResponse = Response & IdentityProviders;

export interface AvailableIdentityProvider {
  id: string;
  name?: string;
}

export interface AvailableIdentityProviders {
  data: AvailableIdentityProvider[];
}

export type GetAvailableIdentityProvidersResponse = Response &
  AvailableIdentityProviders;

export type GetCapabilitiesResponse = Response & Capabilities;

export type IdentityProviderPatchRequestBodyAllOfItem = {
  value: IdentityProvider[];
};

export type IdentityProviderPatchRequestBody = PatchRequestBody &
  IdentityProviderPatchRequestBodyAllOfItem[];

export type RoleEntitlementsPatchItemAllOf = {
  op: RoleEntitlementsPatchItemAllOfOp;
};

export type RoleEntitlementsPatchItem = EntityEntitlementItem &
  RoleEntitlementsPatchItemAllOf;

export enum RoleEntitlementsPatchItemAllOfOp {
  add = "add",
  remove = "remove",
}
export interface RoleEntitlementsPatchRequestBody {
  /** @minItems 1 */
  patches: RoleEntitlementsPatchItem[];
}

export enum GroupEntitlementsPatchItemAllOfOp {
  add = "add",
  remove = "remove",
}
export type GroupEntitlementsPatchItemAllOf = {
  op: GroupEntitlementsPatchItemAllOfOp;
};

export interface GroupEntitlementsPatchRequestBody {
  /** @minItems 1 */
  patches: GroupEntitlementsPatchItem[];
}

export enum GroupRolesPatchItemOp {
  add = "add",
  remove = "remove",
}
export interface GroupRolesPatchItem {
  op: GroupRolesPatchItemOp;
  role: string;
}

export interface GroupRolesPatchRequestBody {
  /** @minItems 1 */
  patches: GroupRolesPatchItem[];
}

export enum GroupIdentitiesPatchItemOp {
  add = "add",
  remove = "remove",
}
export interface GroupIdentitiesPatchItem {
  identity: string;
  op: GroupIdentitiesPatchItemOp;
}

export interface GroupIdentitiesPatchRequestBody {
  /** @minItems 1 */
  patches: GroupIdentitiesPatchItem[];
}

export interface EntitlementSchema {
  entitlement: string;
  entity_type: string;
  receiver_type: string;
}

export interface EntityEntitlement {
  entitlement: string;
  entity_id: string;
  entity_type: string;
}

export interface EntityEntitlementItem {
  entitlement: EntityEntitlement;
}

export type GroupEntitlementsPatchItem = EntityEntitlementItem &
  GroupEntitlementsPatchItemAllOf;

export enum IdentityEntitlementsPatchItemAllOfOp {
  add = "add",
  remove = "remove",
}
export type IdentityEntitlementsPatchItemAllOf = {
  op: IdentityEntitlementsPatchItemAllOfOp;
};

export type IdentityEntitlementsPatchItem = EntityEntitlementItem &
  IdentityEntitlementsPatchItemAllOf;

export interface IdentityEntitlementsPatchRequestBody {
  /** @minItems 1 */
  patches: IdentityEntitlementsPatchItem[];
}

export enum IdentityRolesPatchItemOp {
  add = "add",
  remove = "remove",
}
export interface IdentityRolesPatchItem {
  op: IdentityRolesPatchItemOp;
  role: string;
}

export interface IdentityRolesPatchRequestBody {
  /** @minItems 1 */
  patches: IdentityRolesPatchItem[];
}

export enum IdentityGroupsPatchItemOp {
  add = "add",
  remove = "remove",
}
export interface IdentityGroupsPatchItem {
  group: string;
  op: IdentityGroupsPatchItemOp;
}

export interface IdentityGroupsPatchRequestBody {
  /** @minItems 1 */
  patches: IdentityGroupsPatchItem[];
}

export enum PatchRequestBodyItemOp {
  add = "add",
  remove = "remove",
}
export interface PatchRequestBodyElementValueItem {
  id: string;
}

export type PatchRequestBodyElementValue = PatchRequestBodyElementValueItem[];

export type PatchRequestBodyItem = {
  op: PatchRequestBodyItemOp;
  value: PatchRequestBodyElementValue;
};

export type PatchRequestBody = PatchRequestBodyItem[];

export enum CapabilityMethodsItem {
  GET = "GET",
  POST = "POST",
  PUT = "PUT",
  DELETE = "DELETE",
  PATCH = "PATCH",
}
export interface Capability {
  endpoint: string;
  methods: CapabilityMethodsItem[];
}

export interface Capabilities {
  data: Capability[];
}

export interface ResponseLinksNext {
  href: string;
}

export interface ResponseLinks {
  next: ResponseLinksNext;
}

export interface ResponseMeta {
  page?: number;
  pageToken?: string;
  size: number;
  total?: number;
}

export interface Response {
  _links: ResponseLinks;
  _meta: ResponseMeta;
  message: string;
  status: number;
}

export interface Resources {
  data: Resource[];
}

export interface Entity {
  id: string;
  name: string;
  type: string;
}

export interface Resource {
  entity: Entity;
  parent?: Entity;
}

export interface RoleEntitlement {
  entitlement?: string;
  entity?: Entity;
  resource?: string;
}

export interface Role {
  entitlements?: RoleEntitlement[];
  id?: string;
  name: string;
}

export interface Roles {
  data: Role[];
}

export interface Group {
  id?: string;
  name: string;
}

export interface Groups {
  data: Group[];
}

export interface Identity {
  addedBy: string;
  certificate?: string;
  email: string;
  firstName?: string;
  groups?: number;
  id?: string;
  joined?: string;
  lastLogin?: string;
  lastName?: string;
  permissions?: number;
  roles?: number;
  source: string;
}

export interface Identities {
  data: Identity[];
}

export enum IdentityProviderSyncMode {
  import = "import",
}
export interface IdentityProvider {
  acceptsPromptNone?: boolean;
  accountLinkingOnly?: boolean;
  clientID?: string;
  clientSecret?: string;
  disableIdentityInfo?: boolean;
  enabled?: boolean;
  id?: string;
  identityCount?: number;
  name?: string;
  redirectUrl?: string;
  storeTokens?: boolean;
  storeTokensReadable?: boolean;
  syncMode?: IdentityProviderSyncMode;
  trustEmail?: boolean;
}

export interface IdentityProviders {
  data: IdentityProvider[];
}
