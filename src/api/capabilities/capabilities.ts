/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

 * OpenAPI spec version: 0.0.10
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customInstance } from "../../api-utils/mutator/custom-instance";
import type { ErrorType } from "../../api-utils/mutator/custom-instance";
import type { GetCapabilitiesResponse } from "../api.schemas";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * This endpoint will be used by the frontend to determine which UI elements should be enabled through a mapping. All available endpoints should be listed here along with the available methods.
 * @summary Returns the list of endpoints implemented by this API.
 */
export const getCapabilities = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetCapabilitiesResponse>(
    { url: `/capabilities`, method: "GET", signal },
    options,
  );
};

export const getGetCapabilitiesQueryKey = () => {
  return [`/capabilities`] as const;
};

export const getGetCapabilitiesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCapabilities>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCapabilities>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCapabilitiesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCapabilities>>> = ({
    signal,
  }) => getCapabilities(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCapabilities>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCapabilitiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCapabilities>>
>;
export type GetCapabilitiesQueryError = ErrorType<unknown>;

/**
 * @summary Returns the list of endpoints implemented by this API.
 */
export const useGetCapabilities = <
  TData = Awaited<ReturnType<typeof getCapabilities>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCapabilities>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCapabilitiesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
