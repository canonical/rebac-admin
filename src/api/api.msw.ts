/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

#### Changelog
| Version | Notes |
|---|---|
| **0.0.6** | Ensured compatibility with Orval Restful Client Generator. |
| **0.0.5** | Add filter parameter to top level collection `GET` requests. |
| **0.0.4** | Added pagination parameters to appropriate `GET` requests.<br />Changed a couple of `PUT`'s to `PATCH`'s to account for the possible subset returned from the paginated `GET`'s. |
| **0.0.3** | Added skeleton error responses for `400`, `401`, `404`, and `5XX` (`default`) |
| **0.0.2** | Added `GET /users/{id}/groups`<br />Added `GET /users/{id}roles`<br />Added `GET /users/{id}/entitlements`<br />Added `GET,PUT /groups/{id}/users`<br>Added `DELETE /groups/{id}/users/{userId}`<br />Added `GET /roles/{id}/entitlements`<br />Added `DELETE /roles/{id}/entitlements/{entitlementId}` |
| **0.0.1** | Initial dump |

 * OpenAPI spec version: 0.0.6
 */
import { rest } from "msw";
import { faker } from "@faker-js/faker";

export const getGetAuthenticationProvidersMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    tobedefined: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  }));

export const getGetAuthenticationMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    storeTokens: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    storeTokensReadable: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    acceptsPromptNone: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    disableUserInfo: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    trustEmail: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    accountLinkingOnly: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    syncMode: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["import"]),
      undefined,
    ]),
    userCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
  }));

export const getPostAuthenticationMock = () => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  storeTokens: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  storeTokensReadable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  acceptsPromptNone: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  disableUserInfo: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  trustEmail: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  accountLinkingOnly: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  syncMode: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["import"]),
    undefined,
  ]),
  userCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
});

export const getGetAuthenticationIdMock = () => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  storeTokens: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  storeTokensReadable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  acceptsPromptNone: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  disableUserInfo: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  trustEmail: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  accountLinkingOnly: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  syncMode: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["import"]),
    undefined,
  ]),
  userCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
});

export const getGetUsersMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    email: faker.word.sample(),
    firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    joined: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    lastLogin: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    source: faker.word.sample(),
    groups: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    roles: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    permissions: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    addedBy: faker.word.sample(),
    certificate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  }));

export const getPostUsersMock = () => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  email: faker.word.sample(),
  firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  joined: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  lastLogin: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  source: faker.word.sample(),
  groups: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  roles: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  permissions: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  addedBy: faker.word.sample(),
  certificate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
});

export const getGetUsersIdMock = () => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  email: faker.word.sample(),
  firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  joined: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  lastLogin: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  source: faker.word.sample(),
  groups: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  roles: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  permissions: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  addedBy: faker.word.sample(),
  certificate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
});

export const getGetUsersIdGroupsMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    name: faker.word.sample(),
  }));

export const getGetUsersIdRolesMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    name: faker.word.sample(),
    entitlements: faker.helpers.arrayElement([
      Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        entity: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        resource: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        entitlement: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
      })),
      undefined,
    ]),
  }));

export const getGetUsersIdEntitlementsMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.word.sample());

export const getGetGroupsMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    name: faker.word.sample(),
  }));

export const getPostGroupsMock = () => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.word.sample(),
});

export const getGetGroupsIdMock = () => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.word.sample(),
});

export const getGetGroupsIdUsersMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    email: faker.word.sample(),
    firstName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    lastName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    joined: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    lastLogin: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    source: faker.word.sample(),
    groups: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    roles: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    permissions: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    addedBy: faker.word.sample(),
    certificate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  }));

export const getGetRolesMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    name: faker.word.sample(),
    entitlements: faker.helpers.arrayElement([
      Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        entity: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        resource: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        entitlement: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
      })),
      undefined,
    ]),
  }));

export const getPostRolesMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    name: faker.word.sample(),
    entitlements: faker.helpers.arrayElement([
      Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        entity: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        resource: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        entitlement: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
      })),
      undefined,
    ]),
  }));

export const getGetRolesIdMock = () => ({
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  name: faker.word.sample(),
  entitlements: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      entity: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      resource: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      entitlement: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    undefined,
  ]),
});

export const getGetRolesIdEntitlementsMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.word.sample());

export const getGetEntitlementsMock = () =>
  faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      entity: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      entitlement: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    })),
    faker.random.word(),
  ]);

export const getPutEntitlementsMock = () => faker.random.word();

export const getGetResourcesMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.word.sample(),
    name: faker.word.sample(),
    entity: faker.word.sample(),
    parent: {
      id: faker.word.sample(),
      name: faker.word.sample(),
      entity: faker.word.sample(),
      parent: {
        id: faker.word.sample(),
        name: faker.word.sample(),
        entity: faker.word.sample(),
      },
    },
  }));

export const getCanonicalOpenFGAAdministrationProductCompatibilityAPIMSW =
  () => [
    rest.get("*/authentication/providers", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetAuthenticationProvidersMock()),
      );
    }),
    rest.get("*/authentication", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetAuthenticationMock()),
      );
    }),
    rest.post("*/authentication", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getPostAuthenticationMock()),
      );
    }),
    rest.get("*/authentication/:id", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetAuthenticationIdMock()),
      );
    }),
    rest.patch("*/authentication/:id", (_req, res, ctx) => {
      return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
    }),
    rest.delete("*/authentication/:id", (_req, res, ctx) => {
      return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
    }),
    rest.get("*/users", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetUsersMock()),
      );
    }),
    rest.post("*/users", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getPostUsersMock()),
      );
    }),
    rest.get("*/users/:id", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetUsersIdMock()),
      );
    }),
    rest.patch("*/users/:id", (_req, res, ctx) => {
      return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
    }),
    rest.delete("*/users/:id", (_req, res, ctx) => {
      return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
    }),
    rest.get("*/users/:id/groups", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetUsersIdGroupsMock()),
      );
    }),
    rest.get("*/users/:id/roles", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetUsersIdRolesMock()),
      );
    }),
    rest.get("*/users/:id/entitlements", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetUsersIdEntitlementsMock()),
      );
    }),
    rest.get("*/groups", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetGroupsMock()),
      );
    }),
    rest.post("*/groups", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getPostGroupsMock()),
      );
    }),
    rest.get("*/groups/:id", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetGroupsIdMock()),
      );
    }),
    rest.patch("*/groups/:id", (_req, res, ctx) => {
      return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
    }),
    rest.delete("*/groups/:id", (_req, res, ctx) => {
      return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
    }),
    rest.get("*/groups/:id/users", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetGroupsIdUsersMock()),
      );
    }),
    rest.patch("*/groups/:id/users", (_req, res, ctx) => {
      return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
    }),
    rest.delete("*/groups/:id/users/:userId", (_req, res, ctx) => {
      return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
    }),
    rest.get("*/roles", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetRolesMock()),
      );
    }),
    rest.post("*/roles", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getPostRolesMock()),
      );
    }),
    rest.get("*/roles/:id", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetRolesIdMock()),
      );
    }),
    rest.patch("*/roles/:id", (_req, res, ctx) => {
      return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
    }),
    rest.delete("*/roles/:id", (_req, res, ctx) => {
      return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
    }),
    rest.get("*/roles/:id/entitlements", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetRolesIdEntitlementsMock()),
      );
    }),
    rest.delete("*/roles/:id/entitlements/:entitlementId", (_req, res, ctx) => {
      return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
    }),
    rest.get("*/entitlements", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.text(getGetEntitlementsMock()),
      );
    }),
    rest.put("*/entitlements", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.text(getPutEntitlementsMock()),
      );
    }),
    rest.get("*/resources", (_req, res, ctx) => {
      return res(
        ctx.delay(1000),
        ctx.status(200, "Mocked status"),
        ctx.json(getGetResourcesMock()),
      );
    }),
  ];
