/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

#### Changelog
| Version | Notes |
|---|---|
| **0.0.8** | Implement response type as defined in [IAM Platform Admin UI HTTP Spec](https://docs.google.com/document/d/1ElV22e3mePGFPq8CaM3F3IkuyuOLNpjG7yYgtjvygf4/edit). |
| **0.0.7** | Added `/entitlements/raw` endpoint to split `/entitlements` responses. |
| **0.0.6** | Ensured compatibility with Orval Restful Client Generator. |
| **0.0.5** | Add filter parameter to top level collection `GET` requests. |
| **0.0.4** | Added pagination parameters to appropriate `GET` requests.<br />Changed a couple of `PUT`'s to `PATCH`'s to account for the possible subset returned from the paginated `GET`'s. |
| **0.0.3** | Added skeleton error responses for `400`, `401`, `404`, and `5XX` (`default`) |
| **0.0.2** | Added `GET /users/{id}/groups`<br />Added `GET /users/{id}roles`<br />Added `GET /users/{id}/entitlements`<br />Added `GET,PUT /groups/{id}/users`<br>Added `DELETE /groups/{id}/users/{userId}`<br />Added `GET /roles/{id}/entitlements`<br />Added `DELETE /roles/{id}/entitlements/{entitlementId}` |
| **0.0.1** | Initial dump |

 * OpenAPI spec version: 0.0.8
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customInstance } from "../../api-utils/mutator/custom-instance";
import type { ErrorType } from "../../api-utils/mutator/custom-instance";
import type {
  BadRequestResponse,
  DefaultResponse,
  EntitlementsPatchRequest,
  GetRolesId200,
  GetRolesIdEntitlements200,
  GetRolesIdEntitlementsParams,
  GetRolesIdGroups200,
  GetRolesIdGroupsParams,
  NotFoundResponse,
  Response,
  UnauthorizedResponse,
} from "../api.schemas";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Get a single role.
 */
export const getRolesId = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetRolesId200>(
    { url: `/roles/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetRolesIdQueryKey = (id: string) => {
  return [`/roles/${id}`] as const;
};

export const getGetRolesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getRolesId>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRolesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRolesId>>> = ({
    signal,
  }) => getRolesId(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRolesId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRolesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRolesId>>
>;
export type GetRolesIdQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get a single role.
 */
export const useGetRolesId = <
  TData = Awaited<ReturnType<typeof getRolesId>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRolesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update a role.
 */
export const patchRolesId = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<DefaultResponse>(
    { url: `/roles/${id}`, method: "PATCH" },
    options,
  );
};

export const getPatchRolesIdMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | Response
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRolesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchRolesId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchRolesId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return patchRolesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchRolesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchRolesId>>
>;

export type PatchRolesIdMutationError = ErrorType<
  | BadRequestResponse
  | UnauthorizedResponse
  | NotFoundResponse
  | Response
  | DefaultResponse
>;

/**
 * @summary Update a role.
 */
export const usePatchRolesId = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | Response
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRolesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchRolesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getPatchRolesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete a role.
 */
export const deleteRolesId = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Response>(
    { url: `/roles/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteRolesIdMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRolesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRolesId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRolesId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteRolesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteRolesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRolesId>>
>;

export type DeleteRolesIdMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Delete a role.
 */
export const useDeleteRolesId = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRolesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteRolesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteRolesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get the entitlements of a role
 */
export const getRolesIdEntitlements = (
  id: string,
  params?: GetRolesIdEntitlementsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetRolesIdEntitlements200>(
    { url: `/roles/${id}/entitlements`, method: "GET", params, signal },
    options,
  );
};

export const getGetRolesIdEntitlementsQueryKey = (
  id: string,
  params?: GetRolesIdEntitlementsParams,
) => {
  return [`/roles/${id}/entitlements`, ...(params ? [params] : [])] as const;
};

export const getGetRolesIdEntitlementsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRolesIdEntitlements>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetRolesIdEntitlementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRolesIdEntitlements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRolesIdEntitlementsQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRolesIdEntitlements>>
  > = ({ signal }) =>
    getRolesIdEntitlements(id, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRolesIdEntitlements>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRolesIdEntitlementsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRolesIdEntitlements>>
>;
export type GetRolesIdEntitlementsQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get the entitlements of a role
 */
export const useGetRolesIdEntitlements = <
  TData = Awaited<ReturnType<typeof getRolesIdEntitlements>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetRolesIdEntitlementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRolesIdEntitlements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRolesIdEntitlementsQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update entitlements of a role
 */
export const patchRolesIdEntitlements = (
  id: string,
  entitlementsPatchRequest: EntitlementsPatchRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Response>(
    {
      url: `/roles/${id}/entitlements`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: entitlementsPatchRequest,
    },
    options,
  );
};

export const getPatchRolesIdEntitlementsMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRolesIdEntitlements>>,
    TError,
    { id: string; data: EntitlementsPatchRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchRolesIdEntitlements>>,
  TError,
  { id: string; data: EntitlementsPatchRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchRolesIdEntitlements>>,
    { id: string; data: EntitlementsPatchRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchRolesIdEntitlements(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchRolesIdEntitlementsMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchRolesIdEntitlements>>
>;
export type PatchRolesIdEntitlementsMutationBody = EntitlementsPatchRequest;
export type PatchRolesIdEntitlementsMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Update entitlements of a role
 */
export const usePatchRolesIdEntitlements = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRolesIdEntitlements>>,
    TError,
    { id: string; data: EntitlementsPatchRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchRolesIdEntitlements>>,
  TError,
  { id: string; data: EntitlementsPatchRequest },
  TContext
> => {
  const mutationOptions = getPatchRolesIdEntitlementsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Remove an entitlement from a role
 */
export const deleteRolesIdEntitlementsEntitlementId = (
  id: string,
  entitlementId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Response>(
    { url: `/roles/${id}/entitlements/${entitlementId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteRolesIdEntitlementsEntitlementIdMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRolesIdEntitlementsEntitlementId>>,
    TError,
    { id: string; entitlementId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRolesIdEntitlementsEntitlementId>>,
  TError,
  { id: string; entitlementId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRolesIdEntitlementsEntitlementId>>,
    { id: string; entitlementId: string }
  > = (props) => {
    const { id, entitlementId } = props ?? {};

    return deleteRolesIdEntitlementsEntitlementId(
      id,
      entitlementId,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteRolesIdEntitlementsEntitlementIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRolesIdEntitlementsEntitlementId>>
>;

export type DeleteRolesIdEntitlementsEntitlementIdMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Remove an entitlement from a role
 */
export const useDeleteRolesIdEntitlementsEntitlementId = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRolesIdEntitlementsEntitlementId>>,
    TError,
    { id: string; entitlementId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteRolesIdEntitlementsEntitlementId>>,
  TError,
  { id: string; entitlementId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteRolesIdEntitlementsEntitlementIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get the groups of a role
 */
export const getRolesIdGroups = (
  id: string,
  params?: GetRolesIdGroupsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetRolesIdGroups200>(
    { url: `/roles/${id}/groups`, method: "GET", params, signal },
    options,
  );
};

export const getGetRolesIdGroupsQueryKey = (
  id: string,
  params?: GetRolesIdGroupsParams,
) => {
  return [`/roles/${id}/groups`, ...(params ? [params] : [])] as const;
};

export const getGetRolesIdGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRolesIdGroups>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetRolesIdGroupsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRolesIdGroups>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRolesIdGroupsQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRolesIdGroups>>
  > = ({ signal }) => getRolesIdGroups(id, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRolesIdGroups>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRolesIdGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRolesIdGroups>>
>;
export type GetRolesIdGroupsQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get the groups of a role
 */
export const useGetRolesIdGroups = <
  TData = Awaited<ReturnType<typeof getRolesIdGroups>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetRolesIdGroupsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRolesIdGroups>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRolesIdGroupsQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
