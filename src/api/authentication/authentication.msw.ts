/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

 * OpenAPI spec version: 0.0.10
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";

import type {
  GetAvailableIdentityProvidersResponse,
  GetIdentityProvidersResponse,
  IdentityProvider,
} from "../api.schemas";

export const getGetAvailableIdentityProvidersResponseMock = (
  overrideResponse: any = {},
): GetAvailableIdentityProvidersResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.word.sample(),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getGetIdentityProvidersResponseMock = (
  overrideResponse: any = {},
): GetIdentityProvidersResponse => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    pageToken: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  },
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    acceptsPromptNone: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    accountLinkingOnly: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    disableIdentityInfo: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    identityCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    storeTokens: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    storeTokensReadable: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    syncMode: faker.helpers.arrayElement([
      faker.helpers.arrayElement(["import"] as const),
      undefined,
    ]),
    trustEmail: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    ...overrideResponse,
  })),
  ...overrideResponse,
});

export const getPostIdentityProvidersResponseMock = (
  overrideResponse: any = {},
): IdentityProvider => ({
  acceptsPromptNone: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  accountLinkingOnly: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  disableIdentityInfo: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  identityCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  storeTokens: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  storeTokensReadable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  syncMode: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["import"] as const),
    undefined,
  ]),
  trustEmail: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetIdentityProvidersItemResponseMock = (
  overrideResponse: any = {},
): IdentityProvider => ({
  acceptsPromptNone: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  accountLinkingOnly: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  disableIdentityInfo: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  identityCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  storeTokens: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  storeTokensReadable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  syncMode: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["import"] as const),
    undefined,
  ]),
  trustEmail: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getPutIdentityProvidersItemResponseMock = (
  overrideResponse: any = {},
): IdentityProvider => ({
  acceptsPromptNone: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  accountLinkingOnly: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  clientID: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  clientSecret: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  disableIdentityInfo: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  id: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  identityCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  redirectUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  storeTokens: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  storeTokensReadable: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  syncMode: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["import"] as const),
    undefined,
  ]),
  trustEmail: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getGetAvailableIdentityProvidersMockHandler = (
  overrideResponse?: GetAvailableIdentityProvidersResponse,
) => {
  return http.get("*/authentication/providers", async () => {
    await delay(900);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetAvailableIdentityProvidersResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersMockHandler = (
  overrideResponse?: GetIdentityProvidersResponse,
) => {
  return http.get("*/authentication", async () => {
    await delay(900);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetIdentityProvidersResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPostIdentityProvidersMockHandler = (
  overrideResponse?: IdentityProvider,
) => {
  return http.post("*/authentication", async () => {
    await delay(900);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getPostIdentityProvidersResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getGetIdentityProvidersItemMockHandler = (
  overrideResponse?: IdentityProvider,
) => {
  return http.get("*/authentication/:id", async () => {
    await delay(900);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getGetIdentityProvidersItemResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPutIdentityProvidersItemMockHandler = (
  overrideResponse?: IdentityProvider,
) => {
  return http.put("*/authentication/:id", async () => {
    await delay(900);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse
          ? overrideResponse
          : getPutIdentityProvidersItemResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getDeleteIdentityProvidersItemMockHandler = () => {
  return http.delete("*/authentication/:id", async () => {
    await delay(900);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};
export const getAuthenticationMock = () => [
  getGetAvailableIdentityProvidersMockHandler(),
  getGetIdentityProvidersMockHandler(),
  getPostIdentityProvidersMockHandler(),
  getGetIdentityProvidersItemMockHandler(),
  getPutIdentityProvidersItemMockHandler(),
  getDeleteIdentityProvidersItemMockHandler(),
];
