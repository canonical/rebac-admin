/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

 * OpenAPI spec version: 0.0.10
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customInstance } from "../../api-utils/mutator/custom-instance";
import type { ErrorType } from "../../api-utils/mutator/custom-instance";
import type {
  BadRequestResponse,
  DefaultResponse,
  GetAvailableIdentityProvidersParams,
  GetAvailableIdentityProvidersResponse,
  GetIdentityProvidersParams,
  GetIdentityProvidersResponse,
  IdentityProvider,
  NotFoundResponse,
  UnauthorizedResponse,
} from "../api.schemas";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * This endpoint should return a list of provides known to the system, for example Okta, Google, GitHub etc.<br />
**TODO**: - Specify the return type

 * @summary Returns the list of supported identity providers.
 */
export const getAvailableIdentityProviders = (
  params?: GetAvailableIdentityProvidersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetAvailableIdentityProvidersResponse>(
    { url: `/authentication/providers`, method: "GET", params, signal },
    options,
  );
};

export const getGetAvailableIdentityProvidersQueryKey = (
  params?: GetAvailableIdentityProvidersParams,
) => {
  return [`/authentication/providers`, ...(params ? [params] : [])] as const;
};

export const getGetAvailableIdentityProvidersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAvailableIdentityProviders>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  params?: GetAvailableIdentityProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableIdentityProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAvailableIdentityProvidersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAvailableIdentityProviders>>
  > = ({ signal }) =>
    getAvailableIdentityProviders(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAvailableIdentityProviders>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAvailableIdentityProvidersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAvailableIdentityProviders>>
>;
export type GetAvailableIdentityProvidersQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Returns the list of supported identity providers.
 */
export const useGetAvailableIdentityProviders = <
  TData = Awaited<ReturnType<typeof getAvailableIdentityProviders>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  params?: GetAvailableIdentityProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAvailableIdentityProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAvailableIdentityProvidersQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * This endpoint lists all enabled providers.

 * @summary List configured authentication providers.
 */
export const getIdentityProviders = (
  params?: GetIdentityProvidersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetIdentityProvidersResponse>(
    { url: `/authentication`, method: "GET", params, signal },
    options,
  );
};

export const getGetIdentityProvidersQueryKey = (
  params?: GetIdentityProvidersParams,
) => {
  return [`/authentication`, ...(params ? [params] : [])] as const;
};

export const getGetIdentityProvidersQueryOptions = <
  TData = Awaited<ReturnType<typeof getIdentityProviders>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  params?: GetIdentityProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getIdentityProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetIdentityProvidersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getIdentityProviders>>
  > = ({ signal }) => getIdentityProviders(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getIdentityProviders>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetIdentityProvidersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIdentityProviders>>
>;
export type GetIdentityProvidersQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary List configured authentication providers.
 */
export const useGetIdentityProviders = <
  TData = Awaited<ReturnType<typeof getIdentityProviders>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  params?: GetIdentityProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getIdentityProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIdentityProvidersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Configure a new authentication provider.
 * @summary Configure a new authentication provider.
 */
export const postIdentityProviders = (
  identityProvider: IdentityProvider,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<IdentityProvider>(
    {
      url: `/authentication`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: identityProvider,
    },
    options,
  );
};

export const getPostIdentityProvidersMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postIdentityProviders>>,
    TError,
    { data: IdentityProvider },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postIdentityProviders>>,
  TError,
  { data: IdentityProvider },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postIdentityProviders>>,
    { data: IdentityProvider }
  > = (props) => {
    const { data } = props ?? {};

    return postIdentityProviders(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostIdentityProvidersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postIdentityProviders>>
>;
export type PostIdentityProvidersMutationBody = IdentityProvider;
export type PostIdentityProvidersMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Configure a new authentication provider.
 */
export const usePostIdentityProviders = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postIdentityProviders>>,
    TError,
    { data: IdentityProvider },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postIdentityProviders>>,
  TError,
  { data: IdentityProvider },
  TContext
> => {
  const mutationOptions = getPostIdentityProvidersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a single authentication provider.
 * @summary Get a single authentication provider.
 */
export const getIdentityProvidersItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<IdentityProvider>(
    { url: `/authentication/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetIdentityProvidersItemQueryKey = (id: string) => {
  return [`/authentication/${id}`] as const;
};

export const getGetIdentityProvidersItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getIdentityProvidersItem>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getIdentityProvidersItem>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetIdentityProvidersItemQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getIdentityProvidersItem>>
  > = ({ signal }) => getIdentityProvidersItem(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getIdentityProvidersItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetIdentityProvidersItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIdentityProvidersItem>>
>;
export type GetIdentityProvidersItemQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get a single authentication provider.
 */
export const useGetIdentityProvidersItem = <
  TData = Awaited<ReturnType<typeof getIdentityProvidersItem>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getIdentityProvidersItem>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetIdentityProvidersItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update an authentication provider configuration.
 * @summary Update an authentication provider configuration.
 */
export const putIdentityProvidersItem = (
  id: string,
  identityProvider: IdentityProvider,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<IdentityProvider>(
    {
      url: `/authentication/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: identityProvider,
    },
    options,
  );
};

export const getPutIdentityProvidersItemMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putIdentityProvidersItem>>,
    TError,
    { id: string; data: IdentityProvider },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putIdentityProvidersItem>>,
  TError,
  { id: string; data: IdentityProvider },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putIdentityProvidersItem>>,
    { id: string; data: IdentityProvider }
  > = (props) => {
    const { id, data } = props ?? {};

    return putIdentityProvidersItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutIdentityProvidersItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof putIdentityProvidersItem>>
>;
export type PutIdentityProvidersItemMutationBody = IdentityProvider;
export type PutIdentityProvidersItemMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Update an authentication provider configuration.
 */
export const usePutIdentityProvidersItem = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putIdentityProvidersItem>>,
    TError,
    { id: string; data: IdentityProvider },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putIdentityProvidersItem>>,
  TError,
  { id: string; data: IdentityProvider },
  TContext
> => {
  const mutationOptions = getPutIdentityProvidersItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Remove an authentication provider configuration.
 * @summary Remove an authentication provider configuration.
 */
export const deleteIdentityProvidersItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/authentication/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteIdentityProvidersItemMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteIdentityProvidersItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteIdentityProvidersItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteIdentityProvidersItem>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteIdentityProvidersItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteIdentityProvidersItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteIdentityProvidersItem>>
>;

export type DeleteIdentityProvidersItemMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Remove an authentication provider configuration.
 */
export const useDeleteIdentityProvidersItem = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteIdentityProvidersItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteIdentityProvidersItem>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getDeleteIdentityProvidersItemMutationOptions(options);

  return useMutation(mutationOptions);
};
