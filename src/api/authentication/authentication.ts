/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

 * OpenAPI spec version: 0.0.10
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  BadRequestResponse,
  DefaultResponse,
  GetAuthenticationParams,
  GetAuthenticationProviders200,
  GetAuthenticationProvidersParams,
  GetIdentityProvidersResponse,
  IdentityProvider,
  NotFoundResponse,
  UnauthorizedResponse,
} from "../api.schemas";

/**
 * This endpoint should return a list of provides known to the system, for example Okta, Google, GitHub etc.<br />
**TODO**: - Specify the return type

 * @summary Returns the list of supported identity providers.
 */
export const getAuthenticationProviders = (
  params?: GetAuthenticationProvidersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetAuthenticationProviders200>> => {
  return axios.get(`/authentication/providers`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetAuthenticationProvidersQueryKey = (
  params?: GetAuthenticationProvidersParams,
) => {
  return [`/authentication/providers`, ...(params ? [params] : [])] as const;
};

export const getGetAuthenticationProvidersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthenticationProviders>>,
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  params?: GetAuthenticationProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticationProviders>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAuthenticationProvidersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAuthenticationProviders>>
  > = ({ signal }) =>
    getAuthenticationProviders(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAuthenticationProviders>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAuthenticationProvidersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuthenticationProviders>>
>;
export type GetAuthenticationProvidersQueryError = AxiosError<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Returns the list of supported identity providers.
 */
export const useGetAuthenticationProviders = <
  TData = Awaited<ReturnType<typeof getAuthenticationProviders>>,
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  params?: GetAuthenticationProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticationProviders>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAuthenticationProvidersQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * This endpoint lists all enabled providers.

 * @summary List configured authentication providers.
 */
export const getAuthentication = (
  params?: GetAuthenticationParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetIdentityProvidersResponse>> => {
  return axios.get(`/authentication`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetAuthenticationQueryKey = (
  params?: GetAuthenticationParams,
) => {
  return [`/authentication`, ...(params ? [params] : [])] as const;
};

export const getGetAuthenticationQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthentication>>,
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  params?: GetAuthenticationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAuthentication>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAuthenticationQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAuthentication>>
  > = ({ signal }) => getAuthentication(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAuthentication>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAuthenticationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuthentication>>
>;
export type GetAuthenticationQueryError = AxiosError<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary List configured authentication providers.
 */
export const useGetAuthentication = <
  TData = Awaited<ReturnType<typeof getAuthentication>>,
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  params?: GetAuthenticationParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAuthentication>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAuthenticationQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Configure a new authentication provider.
 * @summary Configure a new authentication provider.
 */
export const postAuthentication = (
  identityProvider: IdentityProvider,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<IdentityProvider>> => {
  return axios.post(`/authentication`, identityProvider, options);
};

export const getPostAuthenticationMutationOptions = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthentication>>,
    TError,
    { data: IdentityProvider },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthentication>>,
  TError,
  { data: IdentityProvider },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthentication>>,
    { data: IdentityProvider }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthentication(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthenticationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthentication>>
>;
export type PostAuthenticationMutationBody = IdentityProvider;
export type PostAuthenticationMutationError = AxiosError<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Configure a new authentication provider.
 */
export const usePostAuthentication = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthentication>>,
    TError,
    { data: IdentityProvider },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostAuthenticationMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a single authentication provider.
 * @summary Get a single authentication provider.
 */
export const getAuthenticationItem = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<IdentityProvider>> => {
  return axios.get(`/authentication/${id}`, options);
};

export const getGetAuthenticationItemQueryKey = (id: string) => {
  return [`/authentication/${id}`] as const;
};

export const getGetAuthenticationItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthenticationItem>>,
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticationItem>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAuthenticationItemQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAuthenticationItem>>
  > = ({ signal }) => getAuthenticationItem(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAuthenticationItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAuthenticationItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuthenticationItem>>
>;
export type GetAuthenticationItemQueryError = AxiosError<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get a single authentication provider.
 */
export const useGetAuthenticationItem = <
  TData = Awaited<ReturnType<typeof getAuthenticationItem>>,
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticationItem>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAuthenticationItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update an authentication provider configuration.
 * @summary Update an authentication provider configuration.
 */
export const putAuthenticationItem = (
  id: string,
  identityProvider: IdentityProvider,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.put(`/authentication/${id}`, identityProvider, options);
};

export const getPutAuthenticationItemMutationOptions = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAuthenticationItem>>,
    TError,
    { id: string; data: IdentityProvider },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putAuthenticationItem>>,
  TError,
  { id: string; data: IdentityProvider },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putAuthenticationItem>>,
    { id: string; data: IdentityProvider }
  > = (props) => {
    const { id, data } = props ?? {};

    return putAuthenticationItem(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutAuthenticationItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof putAuthenticationItem>>
>;
export type PutAuthenticationItemMutationBody = IdentityProvider;
export type PutAuthenticationItemMutationError = AxiosError<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Update an authentication provider configuration.
 */
export const usePutAuthenticationItem = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAuthenticationItem>>,
    TError,
    { id: string; data: IdentityProvider },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPutAuthenticationItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Remove an authentication provider configuration.
 * @summary Remove an authentication provider configuration.
 */
export const deleteAuthenticationItem = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/authentication/${id}`, options);
};

export const getDeleteAuthenticationItemMutationOptions = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAuthenticationItem>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAuthenticationItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAuthenticationItem>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteAuthenticationItem(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteAuthenticationItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteAuthenticationItem>>
>;

export type DeleteAuthenticationItemMutationError = AxiosError<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Remove an authentication provider configuration.
 */
export const useDeleteAuthenticationItem = <
  TError = AxiosError<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAuthenticationItem>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteAuthenticationItemMutationOptions(options);

  return useMutation(mutationOptions);
};
