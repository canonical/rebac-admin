/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

 * OpenAPI spec version: 0.0.10
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customInstance } from "../../api-utils/mutator/custom-instance";
import type { ErrorType } from "../../api-utils/mutator/custom-instance";
import type {
  BadRequestResponse,
  DefaultResponse,
  GetRoleEntitlementsResponse,
  GetRolesItemEntitlementsParams,
  GetRolesParams,
  GetRolesResponse,
  NotFoundResponse,
  Role,
  RoleEntitlementsPatchRequestBody,
  UnauthorizedResponse,
} from "../api.schemas";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Get the list of roles.
 * @summary Get the list of roles.
 */
export const getRoles = (
  params?: GetRolesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetRolesResponse>(
    { url: `/roles`, method: "GET", params, signal },
    options,
  );
};

export const getGetRolesQueryKey = (params?: GetRolesParams) => {
  return [`/roles`, ...(params ? [params] : [])] as const;
};

export const getGetRolesQueryOptions = <
  TData = Awaited<ReturnType<typeof getRoles>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  params?: GetRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRolesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoles>>> = ({
    signal,
  }) => getRoles(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRoles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRoles>>
>;
export type GetRolesQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get the list of roles.
 */
export const useGetRoles = <
  TData = Awaited<ReturnType<typeof getRoles>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  params?: GetRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRolesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new role.
 * @summary Create a new role.
 */
export const postRoles = (
  role: Role,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Role>(
    {
      url: `/roles`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: role,
    },
    options,
  );
};

export const getPostRolesMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRoles>>,
    TError,
    { data: Role },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRoles>>,
  TError,
  { data: Role },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRoles>>,
    { data: Role }
  > = (props) => {
    const { data } = props ?? {};

    return postRoles(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostRolesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRoles>>
>;
export type PostRolesMutationBody = Role;
export type PostRolesMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Create a new role.
 */
export const usePostRoles = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRoles>>,
    TError,
    { data: Role },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postRoles>>,
  TError,
  { data: Role },
  TContext
> => {
  const mutationOptions = getPostRolesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a single role.
 * @summary Get a single role.
 */
export const getRolesItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Role>(
    { url: `/roles/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetRolesItemQueryKey = (id: string) => {
  return [`/roles/${id}`] as const;
};

export const getGetRolesItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getRolesItem>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesItem>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRolesItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRolesItem>>> = ({
    signal,
  }) => getRolesItem(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRolesItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRolesItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRolesItem>>
>;
export type GetRolesItemQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get a single role.
 */
export const useGetRolesItem = <
  TData = Awaited<ReturnType<typeof getRolesItem>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesItem>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRolesItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update a role.
 * @summary Update a role.
 */
export const putRolesItem = (
  id: string,
  role: Role,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Role>(
    {
      url: `/roles/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: role,
    },
    options,
  );
};

export const getPutRolesItemMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putRolesItem>>,
    TError,
    { id: string; data: Role },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putRolesItem>>,
  TError,
  { id: string; data: Role },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putRolesItem>>,
    { id: string; data: Role }
  > = (props) => {
    const { id, data } = props ?? {};

    return putRolesItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutRolesItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof putRolesItem>>
>;
export type PutRolesItemMutationBody = Role;
export type PutRolesItemMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Update a role.
 */
export const usePutRolesItem = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putRolesItem>>,
    TError,
    { id: string; data: Role },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putRolesItem>>,
  TError,
  { id: string; data: Role },
  TContext
> => {
  const mutationOptions = getPutRolesItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete a role.
 * @summary Delete a role.
 */
export const deleteRolesItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/roles/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteRolesItemMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRolesItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRolesItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRolesItem>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteRolesItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteRolesItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRolesItem>>
>;

export type DeleteRolesItemMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Delete a role.
 */
export const useDeleteRolesItem = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRolesItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteRolesItem>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteRolesItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get the entitlements of a role.
 * @summary Get the entitlements of a role.
 */
export const getRolesItemEntitlements = (
  id: string,
  params?: GetRolesItemEntitlementsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetRoleEntitlementsResponse>(
    { url: `/roles/${id}/entitlements`, method: "GET", params, signal },
    options,
  );
};

export const getGetRolesItemEntitlementsQueryKey = (
  id: string,
  params?: GetRolesItemEntitlementsParams,
) => {
  return [`/roles/${id}/entitlements`, ...(params ? [params] : [])] as const;
};

export const getGetRolesItemEntitlementsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRolesItemEntitlements>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetRolesItemEntitlementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRolesItemEntitlements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRolesItemEntitlementsQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRolesItemEntitlements>>
  > = ({ signal }) =>
    getRolesItemEntitlements(id, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRolesItemEntitlements>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRolesItemEntitlementsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRolesItemEntitlements>>
>;
export type GetRolesItemEntitlementsQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get the entitlements of a role.
 */
export const useGetRolesItemEntitlements = <
  TData = Awaited<ReturnType<typeof getRolesItemEntitlements>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetRolesItemEntitlementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRolesItemEntitlements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRolesItemEntitlementsQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Add or remove a direct entitlements to/from a role.
 * @summary Add or remove a direct entitlements to/from a role.
 */
export const patchRolesItemEntitlements = (
  id: string,
  roleEntitlementsPatchRequestBody: RoleEntitlementsPatchRequestBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/roles/${id}/entitlements`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: roleEntitlementsPatchRequestBody,
    },
    options,
  );
};

export const getPatchRolesItemEntitlementsMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRolesItemEntitlements>>,
    TError,
    { id: string; data: RoleEntitlementsPatchRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchRolesItemEntitlements>>,
  TError,
  { id: string; data: RoleEntitlementsPatchRequestBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchRolesItemEntitlements>>,
    { id: string; data: RoleEntitlementsPatchRequestBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchRolesItemEntitlements(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchRolesItemEntitlementsMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchRolesItemEntitlements>>
>;
export type PatchRolesItemEntitlementsMutationBody =
  RoleEntitlementsPatchRequestBody;
export type PatchRolesItemEntitlementsMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Add or remove a direct entitlements to/from a role.
 */
export const usePatchRolesItemEntitlements = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRolesItemEntitlements>>,
    TError,
    { id: string; data: RoleEntitlementsPatchRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchRolesItemEntitlements>>,
  TError,
  { id: string; data: RoleEntitlementsPatchRequestBody },
  TContext
> => {
  const mutationOptions = getPatchRolesItemEntitlementsMutationOptions(options);

  return useMutation(mutationOptions);
};
