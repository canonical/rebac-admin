/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

 * OpenAPI spec version: 0.0.10
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customInstance } from "../../api-utils/mutator/custom-instance";
import type { ErrorType } from "../../api-utils/mutator/custom-instance";
import type {
  BadRequestResponse,
  DefaultResponse,
  GetGroupEntitlementsResponse,
  GetGroupIdentitiesResponse,
  GetGroupRolesResponse,
  GetGroupsItemEntitlementsParams,
  GetGroupsItemIdentitiesParams,
  GetGroupsItemRolesParams,
  GetGroupsParams,
  GetGroupsResponse,
  Group,
  GroupEntitlementsPatchRequestBody,
  GroupIdentitiesPatchRequestBody,
  GroupRolesPatchRequestBody,
  NotFoundResponse,
  UnauthorizedResponse,
} from "../api.schemas";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Get all groups.
 * @summary Get all groups.
 */
export const getGroups = (
  params?: GetGroupsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupsResponse>(
    { url: `/groups`, method: "GET", params, signal },
    options,
  );
};

export const getGetGroupsQueryKey = (params?: GetGroupsParams) => {
  return [`/groups`, ...(params ? [params] : [])] as const;
};

export const getGetGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroups>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  params?: GetGroupsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroups>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGroupsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroups>>> = ({
    signal,
  }) => getGroups(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroups>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroups>>
>;
export type GetGroupsQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get all groups.
 */
export const useGetGroups = <
  TData = Awaited<ReturnType<typeof getGroups>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  params?: GetGroupsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroups>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new group.
 * @summary Create a new group.
 */
export const postGroups = (
  group: Group,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Group>(
    {
      url: `/groups`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: group,
    },
    options,
  );
};

export const getPostGroupsMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postGroups>>,
    TError,
    { data: Group },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postGroups>>,
  TError,
  { data: Group },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postGroups>>,
    { data: Group }
  > = (props) => {
    const { data } = props ?? {};

    return postGroups(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostGroupsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postGroups>>
>;
export type PostGroupsMutationBody = Group;
export type PostGroupsMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Create a new group.
 */
export const usePostGroups = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postGroups>>,
    TError,
    { data: Group },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postGroups>>,
  TError,
  { data: Group },
  TContext
> => {
  const mutationOptions = getPostGroupsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get a single group.
 * @summary Get a single group.
 */
export const getGroupsItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Group>(
    { url: `/groups/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetGroupsItemQueryKey = (id: string) => {
  return [`/groups/${id}`] as const;
};

export const getGetGroupsItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsItem>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroupsItem>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGroupsItemQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupsItem>>> = ({
    signal,
  }) => getGroupsItem(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsItem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetGroupsItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsItem>>
>;
export type GetGroupsItemQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get a single group.
 */
export const useGetGroupsItem = <
  TData = Awaited<ReturnType<typeof getGroupsItem>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroupsItem>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupsItemQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update a group.
 * @summary Update a group.
 */
export const putGroupsItem = (
  id: string,
  group: Group,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Group>(
    {
      url: `/groups/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: group,
    },
    options,
  );
};

export const getPutGroupsItemMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putGroupsItem>>,
    TError,
    { id: string; data: Group },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putGroupsItem>>,
  TError,
  { id: string; data: Group },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putGroupsItem>>,
    { id: string; data: Group }
  > = (props) => {
    const { id, data } = props ?? {};

    return putGroupsItem(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutGroupsItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof putGroupsItem>>
>;
export type PutGroupsItemMutationBody = Group;
export type PutGroupsItemMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Update a group.
 */
export const usePutGroupsItem = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putGroupsItem>>,
    TError,
    { id: string; data: Group },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putGroupsItem>>,
  TError,
  { id: string; data: Group },
  TContext
> => {
  const mutationOptions = getPutGroupsItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Remove a group.
 * @summary Remove a group.
 */
export const deleteGroupsItem = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/groups/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteGroupsItemMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGroupsItem>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteGroupsItem>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteGroupsItem(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGroupsItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteGroupsItem>>
>;

export type DeleteGroupsItemMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Remove a group.
 */
export const useDeleteGroupsItem = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsItem>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteGroupsItem>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteGroupsItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get the identities of a group.
 * @summary Get the identities of a group.
 */
export const getGroupsItemIdentities = (
  id: string,
  params?: GetGroupsItemIdentitiesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupIdentitiesResponse>(
    { url: `/groups/${id}/identities`, method: "GET", params, signal },
    options,
  );
};

export const getGetGroupsItemIdentitiesQueryKey = (
  id: string,
  params?: GetGroupsItemIdentitiesParams,
) => {
  return [`/groups/${id}/identities`, ...(params ? [params] : [])] as const;
};

export const getGetGroupsItemIdentitiesQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsItemIdentities>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetGroupsItemIdentitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsItemIdentities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetGroupsItemIdentitiesQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGroupsItemIdentities>>
  > = ({ signal }) =>
    getGroupsItemIdentities(id, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsItemIdentities>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetGroupsItemIdentitiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsItemIdentities>>
>;
export type GetGroupsItemIdentitiesQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get the identities of a group.
 */
export const useGetGroupsItemIdentities = <
  TData = Awaited<ReturnType<typeof getGroupsItemIdentities>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetGroupsItemIdentitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsItemIdentities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupsItemIdentitiesQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Add or remove identities to/from a group.
 * @summary Add or remove identities to/from a group.
 */
export const patchGroupsItemIdentities = (
  id: string,
  groupIdentitiesPatchRequestBody: GroupIdentitiesPatchRequestBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/groups/${id}/identities`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: groupIdentitiesPatchRequestBody,
    },
    options,
  );
};

export const getPatchGroupsItemIdentitiesMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsItemIdentities>>,
    TError,
    { id: string; data: GroupIdentitiesPatchRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchGroupsItemIdentities>>,
  TError,
  { id: string; data: GroupIdentitiesPatchRequestBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchGroupsItemIdentities>>,
    { id: string; data: GroupIdentitiesPatchRequestBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchGroupsItemIdentities(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchGroupsItemIdentitiesMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchGroupsItemIdentities>>
>;
export type PatchGroupsItemIdentitiesMutationBody =
  GroupIdentitiesPatchRequestBody;
export type PatchGroupsItemIdentitiesMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Add or remove identities to/from a group.
 */
export const usePatchGroupsItemIdentities = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsItemIdentities>>,
    TError,
    { id: string; data: GroupIdentitiesPatchRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchGroupsItemIdentities>>,
  TError,
  { id: string; data: GroupIdentitiesPatchRequestBody },
  TContext
> => {
  const mutationOptions = getPatchGroupsItemIdentitiesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get the roles of a group.
 * @summary Get the roles of a group.
 */
export const getGroupsItemRoles = (
  id: string,
  params?: GetGroupsItemRolesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupRolesResponse>(
    { url: `/groups/${id}/roles`, method: "GET", params, signal },
    options,
  );
};

export const getGetGroupsItemRolesQueryKey = (
  id: string,
  params?: GetGroupsItemRolesParams,
) => {
  return [`/groups/${id}/roles`, ...(params ? [params] : [])] as const;
};

export const getGetGroupsItemRolesQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsItemRoles>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetGroupsItemRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsItemRoles>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetGroupsItemRolesQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGroupsItemRoles>>
  > = ({ signal }) => getGroupsItemRoles(id, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsItemRoles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetGroupsItemRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsItemRoles>>
>;
export type GetGroupsItemRolesQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get the roles of a group.
 */
export const useGetGroupsItemRoles = <
  TData = Awaited<ReturnType<typeof getGroupsItemRoles>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetGroupsItemRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsItemRoles>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupsItemRolesQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Add or remove a role to/from the group.
 * @summary Add or remove a role to/from the group.
 */
export const patchGroupsItemRoles = (
  id: string,
  groupRolesPatchRequestBody: GroupRolesPatchRequestBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/groups/${id}/roles`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: groupRolesPatchRequestBody,
    },
    options,
  );
};

export const getPatchGroupsItemRolesMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsItemRoles>>,
    TError,
    { id: string; data: GroupRolesPatchRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchGroupsItemRoles>>,
  TError,
  { id: string; data: GroupRolesPatchRequestBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchGroupsItemRoles>>,
    { id: string; data: GroupRolesPatchRequestBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchGroupsItemRoles(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchGroupsItemRolesMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchGroupsItemRoles>>
>;
export type PatchGroupsItemRolesMutationBody = GroupRolesPatchRequestBody;
export type PatchGroupsItemRolesMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Add or remove a role to/from the group.
 */
export const usePatchGroupsItemRoles = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsItemRoles>>,
    TError,
    { id: string; data: GroupRolesPatchRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchGroupsItemRoles>>,
  TError,
  { id: string; data: GroupRolesPatchRequestBody },
  TContext
> => {
  const mutationOptions = getPatchGroupsItemRolesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * List direct entitlements the group has.
 * @summary List direct entitlements the group has.
 */
export const getGroupsItemEntitlements = (
  id: string,
  params?: GetGroupsItemEntitlementsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupEntitlementsResponse>(
    { url: `/groups/${id}/entitlements`, method: "GET", params, signal },
    options,
  );
};

export const getGetGroupsItemEntitlementsQueryKey = (
  id: string,
  params?: GetGroupsItemEntitlementsParams,
) => {
  return [`/groups/${id}/entitlements`, ...(params ? [params] : [])] as const;
};

export const getGetGroupsItemEntitlementsQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsItemEntitlements>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetGroupsItemEntitlementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsItemEntitlements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetGroupsItemEntitlementsQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGroupsItemEntitlements>>
  > = ({ signal }) =>
    getGroupsItemEntitlements(id, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsItemEntitlements>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetGroupsItemEntitlementsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsItemEntitlements>>
>;
export type GetGroupsItemEntitlementsQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary List direct entitlements the group has.
 */
export const useGetGroupsItemEntitlements = <
  TData = Awaited<ReturnType<typeof getGroupsItemEntitlements>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetGroupsItemEntitlementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsItemEntitlements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupsItemEntitlementsQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Add or remove a direct entitlements to/from a group.
 * @summary Add or remove a direct entitlements to/from a group.
 */
export const patchGroupsItemEntitlements = (
  id: string,
  groupEntitlementsPatchRequestBody: GroupEntitlementsPatchRequestBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/groups/${id}/entitlements`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: groupEntitlementsPatchRequestBody,
    },
    options,
  );
};

export const getPatchGroupsItemEntitlementsMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsItemEntitlements>>,
    TError,
    { id: string; data: GroupEntitlementsPatchRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchGroupsItemEntitlements>>,
  TError,
  { id: string; data: GroupEntitlementsPatchRequestBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchGroupsItemEntitlements>>,
    { id: string; data: GroupEntitlementsPatchRequestBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchGroupsItemEntitlements(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchGroupsItemEntitlementsMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchGroupsItemEntitlements>>
>;
export type PatchGroupsItemEntitlementsMutationBody =
  GroupEntitlementsPatchRequestBody;
export type PatchGroupsItemEntitlementsMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Add or remove a direct entitlements to/from a group.
 */
export const usePatchGroupsItemEntitlements = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsItemEntitlements>>,
    TError,
    { id: string; data: GroupEntitlementsPatchRequestBody },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchGroupsItemEntitlements>>,
  TError,
  { id: string; data: GroupEntitlementsPatchRequestBody },
  TContext
> => {
  const mutationOptions =
    getPatchGroupsItemEntitlementsMutationOptions(options);

  return useMutation(mutationOptions);
};
