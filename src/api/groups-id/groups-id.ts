/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

#### Changelog
| Version | Notes |
|---|---|
| **0.0.8** | Implement response type as defined in [IAM Platform Admin UI HTTP Spec](https://docs.google.com/document/d/1ElV22e3mePGFPq8CaM3F3IkuyuOLNpjG7yYgtjvygf4/edit). |
| **0.0.7** | Added `/entitlements/raw` endpoint to split `/entitlements` responses. |
| **0.0.6** | Ensured compatibility with Orval Restful Client Generator. |
| **0.0.5** | Add filter parameter to top level collection `GET` requests. |
| **0.0.4** | Added pagination parameters to appropriate `GET` requests.<br />Changed a couple of `PUT`'s to `PATCH`'s to account for the possible subset returned from the paginated `GET`'s. |
| **0.0.3** | Added skeleton error responses for `400`, `401`, `404`, and `5XX` (`default`) |
| **0.0.2** | Added `GET /users/{id}/groups`<br />Added `GET /users/{id}roles`<br />Added `GET /users/{id}/entitlements`<br />Added `GET,PUT /groups/{id}/users`<br>Added `DELETE /groups/{id}/users/{userId}`<br />Added `GET /roles/{id}/entitlements`<br />Added `DELETE /roles/{id}/entitlements/{entitlementId}` |
| **0.0.1** | Initial dump |

 * OpenAPI spec version: 0.0.8
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { customInstance } from "../../api-utils/mutator/custom-instance";
import type { ErrorType } from "../../api-utils/mutator/custom-instance";
import type {
  BadRequestResponse,
  DefaultResponse,
  EntitlementsPatchRequest,
  GetGroupsId200,
  GetGroupsIdEntitlements200,
  GetGroupsIdEntitlementsParams,
  GetGroupsIdIdentities200,
  GetGroupsIdIdentitiesParams,
  GetGroupsIdRoles200,
  IdentitiesPatchRequest,
  NotFoundResponse,
  Response,
  RolesPostRequest,
  UnauthorizedResponse,
} from "../api.schemas";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Get a single group.
 */
export const getGroupsId = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupsId200>(
    { url: `/groups/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetGroupsIdQueryKey = (id: string) => {
  return [`/groups/${id}`] as const;
};

export const getGetGroupsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsId>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroupsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGroupsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupsId>>> = ({
    signal,
  }) => getGroupsId(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetGroupsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsId>>
>;
export type GetGroupsIdQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get a single group.
 */
export const useGetGroupsId = <
  TData = Awaited<ReturnType<typeof getGroupsId>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getGroupsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update a group.
 */
export const patchGroupsId = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<DefaultResponse>(
    { url: `/groups/${id}`, method: "PATCH" },
    options,
  );
};

export const getPatchGroupsIdMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | Response
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchGroupsId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchGroupsId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return patchGroupsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchGroupsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchGroupsId>>
>;

export type PatchGroupsIdMutationError = ErrorType<
  | BadRequestResponse
  | UnauthorizedResponse
  | NotFoundResponse
  | Response
  | DefaultResponse
>;

/**
 * @summary Update a group.
 */
export const usePatchGroupsId = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | Response
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchGroupsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getPatchGroupsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Remove a group.
 */
export const deleteGroupsId = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Response>(
    { url: `/groups/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteGroupsIdMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGroupsId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteGroupsId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteGroupsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGroupsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteGroupsId>>
>;

export type DeleteGroupsIdMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Remove a group.
 */
export const useDeleteGroupsId = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteGroupsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteGroupsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get the roles of a group
 */
export const getGroupsIdRoles = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupsIdRoles200>(
    { url: `/groups/${id}/roles`, method: "GET", signal },
    options,
  );
};

export const getGetGroupsIdRolesQueryKey = (id: string) => {
  return [`/groups/${id}/roles`] as const;
};

export const getGetGroupsIdRolesQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsIdRoles>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsIdRoles>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGroupsIdRolesQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGroupsIdRoles>>
  > = ({ signal }) => getGroupsIdRoles(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsIdRoles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetGroupsIdRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsIdRoles>>
>;
export type GetGroupsIdRolesQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get the roles of a group
 */
export const useGetGroupsIdRoles = <
  TData = Awaited<ReturnType<typeof getGroupsIdRoles>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsIdRoles>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupsIdRolesQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update roles of a group
 */
export const postGroupsIdRoles = (
  id: string,
  rolesPostRequest: RolesPostRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Response>(
    {
      url: `/groups/${id}/roles`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: rolesPostRequest,
    },
    options,
  );
};

export const getPostGroupsIdRolesMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postGroupsIdRoles>>,
    TError,
    { id: string; data: RolesPostRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postGroupsIdRoles>>,
  TError,
  { id: string; data: RolesPostRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postGroupsIdRoles>>,
    { id: string; data: RolesPostRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return postGroupsIdRoles(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostGroupsIdRolesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postGroupsIdRoles>>
>;
export type PostGroupsIdRolesMutationBody = RolesPostRequest;
export type PostGroupsIdRolesMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Update roles of a group
 */
export const usePostGroupsIdRoles = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postGroupsIdRoles>>,
    TError,
    { id: string; data: RolesPostRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postGroupsIdRoles>>,
  TError,
  { id: string; data: RolesPostRequest },
  TContext
> => {
  const mutationOptions = getPostGroupsIdRolesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Remove a role from a group
 */
export const deleteGroupsIdRolesRolesId = (
  id: string,
  rolesId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Response>(
    { url: `/groups/${id}/roles/${rolesId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteGroupsIdRolesRolesIdMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsIdRolesRolesId>>,
    TError,
    { id: string; rolesId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGroupsIdRolesRolesId>>,
  TError,
  { id: string; rolesId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteGroupsIdRolesRolesId>>,
    { id: string; rolesId: string }
  > = (props) => {
    const { id, rolesId } = props ?? {};

    return deleteGroupsIdRolesRolesId(id, rolesId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGroupsIdRolesRolesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteGroupsIdRolesRolesId>>
>;

export type DeleteGroupsIdRolesRolesIdMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Remove a role from a group
 */
export const useDeleteGroupsIdRolesRolesId = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsIdRolesRolesId>>,
    TError,
    { id: string; rolesId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteGroupsIdRolesRolesId>>,
  TError,
  { id: string; rolesId: string },
  TContext
> => {
  const mutationOptions = getDeleteGroupsIdRolesRolesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get the entitlements of a group
 */
export const getGroupsIdEntitlements = (
  id: string,
  params?: GetGroupsIdEntitlementsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupsIdEntitlements200>(
    { url: `/groups/${id}/entitlements`, method: "GET", params, signal },
    options,
  );
};

export const getGetGroupsIdEntitlementsQueryKey = (
  id: string,
  params?: GetGroupsIdEntitlementsParams,
) => {
  return [`/groups/${id}/entitlements`, ...(params ? [params] : [])] as const;
};

export const getGetGroupsIdEntitlementsQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsIdEntitlements>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetGroupsIdEntitlementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsIdEntitlements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetGroupsIdEntitlementsQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGroupsIdEntitlements>>
  > = ({ signal }) =>
    getGroupsIdEntitlements(id, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsIdEntitlements>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetGroupsIdEntitlementsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsIdEntitlements>>
>;
export type GetGroupsIdEntitlementsQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get the entitlements of a group
 */
export const useGetGroupsIdEntitlements = <
  TData = Awaited<ReturnType<typeof getGroupsIdEntitlements>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetGroupsIdEntitlementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsIdEntitlements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupsIdEntitlementsQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update entitlements of a group
 */
export const patchGroupsIdEntitlements = (
  id: string,
  entitlementsPatchRequest: EntitlementsPatchRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Response>(
    {
      url: `/groups/${id}/entitlements`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: entitlementsPatchRequest,
    },
    options,
  );
};

export const getPatchGroupsIdEntitlementsMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsIdEntitlements>>,
    TError,
    { id: string; data: EntitlementsPatchRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchGroupsIdEntitlements>>,
  TError,
  { id: string; data: EntitlementsPatchRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchGroupsIdEntitlements>>,
    { id: string; data: EntitlementsPatchRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchGroupsIdEntitlements(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchGroupsIdEntitlementsMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchGroupsIdEntitlements>>
>;
export type PatchGroupsIdEntitlementsMutationBody = EntitlementsPatchRequest;
export type PatchGroupsIdEntitlementsMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Update entitlements of a group
 */
export const usePatchGroupsIdEntitlements = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsIdEntitlements>>,
    TError,
    { id: string; data: EntitlementsPatchRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchGroupsIdEntitlements>>,
  TError,
  { id: string; data: EntitlementsPatchRequest },
  TContext
> => {
  const mutationOptions = getPatchGroupsIdEntitlementsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Remove an entitlement from a group
 */
export const deleteGroupsIdEntitlementsEntitlementId = (
  id: string,
  entitlementId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Response>(
    { url: `/groups/${id}/entitlements/${entitlementId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteGroupsIdEntitlementsEntitlementIdMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsIdEntitlementsEntitlementId>>,
    TError,
    { id: string; entitlementId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGroupsIdEntitlementsEntitlementId>>,
  TError,
  { id: string; entitlementId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteGroupsIdEntitlementsEntitlementId>>,
    { id: string; entitlementId: string }
  > = (props) => {
    const { id, entitlementId } = props ?? {};

    return deleteGroupsIdEntitlementsEntitlementId(
      id,
      entitlementId,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGroupsIdEntitlementsEntitlementIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteGroupsIdEntitlementsEntitlementId>>
>;

export type DeleteGroupsIdEntitlementsEntitlementIdMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Remove an entitlement from a group
 */
export const useDeleteGroupsIdEntitlementsEntitlementId = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsIdEntitlementsEntitlementId>>,
    TError,
    { id: string; entitlementId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteGroupsIdEntitlementsEntitlementId>>,
  TError,
  { id: string; entitlementId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteGroupsIdEntitlementsEntitlementIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get the identities of a group
 */
export const getGroupsIdIdentities = (
  id: string,
  params?: GetGroupsIdIdentitiesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetGroupsIdIdentities200>(
    { url: `/groups/${id}/identities`, method: "GET", params, signal },
    options,
  );
};

export const getGetGroupsIdIdentitiesQueryKey = (
  id: string,
  params?: GetGroupsIdIdentitiesParams,
) => {
  return [`/groups/${id}/identities`, ...(params ? [params] : [])] as const;
};

export const getGetGroupsIdIdentitiesQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsIdIdentities>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetGroupsIdIdentitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsIdIdentities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetGroupsIdIdentitiesQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGroupsIdIdentities>>
  > = ({ signal }) => getGroupsIdIdentities(id, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsIdIdentities>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetGroupsIdIdentitiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGroupsIdIdentities>>
>;
export type GetGroupsIdIdentitiesQueryError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Get the identities of a group
 */
export const useGetGroupsIdIdentities = <
  TData = Awaited<ReturnType<typeof getGroupsIdIdentities>>,
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
>(
  id: string,
  params?: GetGroupsIdIdentitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGroupsIdIdentities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGroupsIdIdentitiesQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update identities of a group
 */
export const patchGroupsIdIdentities = (
  id: string,
  identitiesPatchRequest: IdentitiesPatchRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Response>(
    {
      url: `/groups/${id}/identities`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: identitiesPatchRequest,
    },
    options,
  );
};

export const getPatchGroupsIdIdentitiesMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsIdIdentities>>,
    TError,
    { id: string; data: IdentitiesPatchRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchGroupsIdIdentities>>,
  TError,
  { id: string; data: IdentitiesPatchRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchGroupsIdIdentities>>,
    { id: string; data: IdentitiesPatchRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchGroupsIdIdentities(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchGroupsIdIdentitiesMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchGroupsIdIdentities>>
>;
export type PatchGroupsIdIdentitiesMutationBody = IdentitiesPatchRequest;
export type PatchGroupsIdIdentitiesMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Update identities of a group
 */
export const usePatchGroupsIdIdentities = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchGroupsIdIdentities>>,
    TError,
    { id: string; data: IdentitiesPatchRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchGroupsIdIdentities>>,
  TError,
  { id: string; data: IdentitiesPatchRequest },
  TContext
> => {
  const mutationOptions = getPatchGroupsIdIdentitiesMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Remove an identity from a group
 */
export const deleteGroupsIdIdentitiesIdentityId = (
  id: string,
  identityId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Response>(
    { url: `/groups/${id}/identities/${identityId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteGroupsIdIdentitiesIdentityIdMutationOptions = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsIdIdentitiesIdentityId>>,
    TError,
    { id: string; identityId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteGroupsIdIdentitiesIdentityId>>,
  TError,
  { id: string; identityId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteGroupsIdIdentitiesIdentityId>>,
    { id: string; identityId: string }
  > = (props) => {
    const { id, identityId } = props ?? {};

    return deleteGroupsIdIdentitiesIdentityId(id, identityId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteGroupsIdIdentitiesIdentityIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteGroupsIdIdentitiesIdentityId>>
>;

export type DeleteGroupsIdIdentitiesIdentityIdMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | NotFoundResponse | DefaultResponse
>;

/**
 * @summary Remove an identity from a group
 */
export const useDeleteGroupsIdIdentitiesIdentityId = <
  TError = ErrorType<
    | BadRequestResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | DefaultResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteGroupsIdIdentitiesIdentityId>>,
    TError,
    { id: string; identityId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteGroupsIdIdentitiesIdentityId>>,
  TError,
  { id: string; identityId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteGroupsIdIdentitiesIdentityIdMutationOptions(options);

  return useMutation(mutationOptions);
};
