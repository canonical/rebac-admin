/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * Canonical OpenFGA Administration Product Compatibility API
 * The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

#### Changelog
| Version | Notes |
|---|---|
| **0.0.8** | Implement response type as defined in [IAM Platform Admin UI HTTP Spec](https://docs.google.com/document/d/1ElV22e3mePGFPq8CaM3F3IkuyuOLNpjG7yYgtjvygf4/edit). |
| **0.0.7** | Added `/entitlements/raw` endpoint to split `/entitlements` responses. |
| **0.0.6** | Ensured compatibility with Orval Restful Client Generator. |
| **0.0.5** | Add filter parameter to top level collection `GET` requests. |
| **0.0.4** | Added pagination parameters to appropriate `GET` requests.<br />Changed a couple of `PUT`'s to `PATCH`'s to account for the possible subset returned from the paginated `GET`'s. |
| **0.0.3** | Added skeleton error responses for `400`, `401`, `404`, and `5XX` (`default`) |
| **0.0.2** | Added `GET /users/{id}/groups`<br />Added `GET /users/{id}roles`<br />Added `GET /users/{id}/entitlements`<br />Added `GET,PUT /groups/{id}/users`<br>Added `DELETE /groups/{id}/users/{userId}`<br />Added `GET /roles/{id}/entitlements`<br />Added `DELETE /roles/{id}/entitlements/{entitlementId}` |
| **0.0.1** | Initial dump |

 * OpenAPI spec version: 0.0.8
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";

import type { GetGroupsId200, GetGroupsIdUsers200 } from "../api.schemas";

export const getGetGroupsIdResponseMock = (
  overrideResponse: any = {},
): GetGroupsId200 => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({})),
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  ...overrideResponse,
});

export const getGetGroupsIdUsersResponseMock = (
  overrideResponse: any = {},
): GetGroupsIdUsers200 => ({
  _links: {
    next: { href: faker.word.sample(), ...overrideResponse },
    ...overrideResponse,
  },
  _meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    size: faker.number.int({ min: undefined, max: undefined }),
    total: faker.number.int({ min: undefined, max: undefined }),
    ...overrideResponse,
  },
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({})),
  message: faker.word.sample(),
  status: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
  ...overrideResponse,
});

export const getGetGroupsIdMockHandler = (
  overrideResponse?: GetGroupsId200,
) => {
  return http.get("*/groups/:id", async () => {
    await delay(900);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetGroupsIdResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPatchGroupsIdMockHandler = () => {
  return http.patch("*/groups/:id", async () => {
    await delay(900);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getDeleteGroupsIdMockHandler = () => {
  return http.delete("*/groups/:id", async () => {
    await delay(900);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getGetGroupsIdUsersMockHandler = (
  overrideResponse?: GetGroupsIdUsers200,
) => {
  return http.get("*/groups/:id/users", async () => {
    await delay(900);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getGetGroupsIdUsersResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPatchGroupsIdUsersMockHandler = () => {
  return http.patch("*/groups/:id/users", async () => {
    await delay(900);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getDeleteGroupsIdUsersUserIdMockHandler = () => {
  return http.delete("*/groups/:id/users/:userId", async () => {
    await delay(900);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};
export const getGroupsIdMock = () => [
  getGetGroupsIdMockHandler(),
  getPatchGroupsIdMockHandler(),
  getDeleteGroupsIdMockHandler(),
  getGetGroupsIdUsersMockHandler(),
  getPatchGroupsIdUsersMockHandler(),
  getDeleteGroupsIdUsersUserIdMockHandler(),
];
