openapi: 3.1.0
info:
  title: Canonical OpenFGA Administration Product Compatibility API
  description: |
    The following specification outlines the API required for the FGA administration frontend to interact with an OpenFGA instance through a products API. This is an evolving specification as reflected in the version number.

    #### Changelog
    | Version | Notes |
    |---|---|
    | **0.0.8** | Implement response type as defined in [IAM Platform Admin UI HTTP Spec](https://docs.google.com/document/d/1ElV22e3mePGFPq8CaM3F3IkuyuOLNpjG7yYgtjvygf4/edit). |
    | **0.0.7** | Added `/entitlements/raw` endpoint to split `/entitlements` responses. |
    | **0.0.6** | Ensured compatibility with Orval Restful Client Generator. |
    | **0.0.5** | Add filter parameter to top level collection `GET` requests. |
    | **0.0.4** | Added pagination parameters to appropriate `GET` requests.<br />Changed a couple of `PUT`'s to `PATCH`'s to account for the possible subset returned from the paginated `GET`'s. |
    | **0.0.3** | Added skeleton error responses for `400`, `401`, `404`, and `5XX` (`default`) |
    | **0.0.2** | Added `GET /users/{id}/groups`<br />Added `GET /users/{id}roles`<br />Added `GET /users/{id}/entitlements`<br />Added `GET,PUT /groups/{id}/users`<br>Added `DELETE /groups/{id}/users/{userId}`<br />Added `GET /roles/{id}/entitlements`<br />Added `DELETE /roles/{id}/entitlements/{entitlementId}` |
    | **0.0.1** | Initial dump |
  version: 0.0.8
paths:
  /authentication/providers:
    get:
      tags:
        - authentication
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationPage'
      summary: Returns the list of supported identity providers.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /authentication:
    get:
      tags:
        - authentication
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationPage'
      summary: List authentication methods.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/IdentityProviders'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - authentication
      summary: Register a new authentication method.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProvider'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProvider'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /authentication/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - authentication/{id}
      summary: Get a single authentication method.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/IdentityProviders'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    patch:
      tags:
        - authentication/{id}
      summary: Update an authentication method.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/IdentityProvider'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    delete:
      tags:
        - authentication/{id}
      summary: Remove an authentication method.
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /users:
    get:
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/FilterParam'
      summary: Get list of users.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/Users'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - users
      summary: Add a local user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - users/{id}
      summary: Get a single user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/Users'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    patch:
      tags:
        - users/{id}
      summary: Update a local user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    delete:
      tags:
        - users/{id}
      summary: Remove a local user.
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /users/{id}/groups:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - users/{id}
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationPage'
      summary: List groups the user is a member of.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/Groups'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /users/{id}/roles:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - users/{id}
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationPage'
      summary: List roles the user is a member of.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/Roles'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /users/{id}/entitlements:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - users/{id}
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationPage'
      summary: List entitlements the user is a member of.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/Entitlements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /groups:
    get:
      tags:
        - groups
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/FilterParam'
      summary: Get all groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/Groups'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - groups
      summary: Create a new group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /groups/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - groups/{id}
      summary: Get a single user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/Groups'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    patch:
      tags:
        - groups/{id}
      summary: Update a group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    delete:
      tags:
        - groups/{id}
      summary: Remove a group.
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /groups/{id}/users:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - groups/{id}
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationPage'
      summary: Get the users of a group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/Users'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    patch:
      tags:
        - groups/{id}
      summary: Update the list of a groups users.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /groups/{id}/users/{userId}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - groups/{id}
      summary: Remove a user from a group
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /roles:
    get:
      tags:
        - roles
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/FilterParam'
      summary: Get the list of roles.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/Roles'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - roles
      summary: Create a new role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleObject'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /roles/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - roles/{id}
      summary: Get a single role.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/Roles'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    patch:
      tags:
        - roles/{id}
      summary: Update a role.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    delete:
      tags:
        - roles/{id}
      summary: Delete a role.
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /roles/{id}/entitlements:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - roles/{id}
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationPage'
      summary: Get the entitlements of a role
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/Entitlements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /roles/{id}/entitlements/{entitlementId}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: entitlementId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - roles/{id}
      summary: Remove an entitlement from a role
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /entitlements:
    get:
      tags:
        - entitlements
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/FilterParam'
      summary: Get the list of entitlements in JSON format.
      description: The application/json response type will return the JSON authorisation model.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/EntityEntitlements'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /entitlements/raw:
    get:
      tags:
        - entitlements
      summary: Get the list of entitlements as raw text.
      description: The text/plain response type will return the raw authorisation model.
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
    put:
      tags:
        - entitlements
      summary: Update the authorisation model.
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              examples: ["...authorization model string"]
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                examples: ["...authorization model string"]
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'
  /resources:
    get:
      tags:
        - resources
      parameters:
        - $ref: '#/components/parameters/PaginationSize'
        - $ref: '#/components/parameters/PaginationPage'
      summary: Get the list of available resources.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - $ref: '#/components/schemas/Resources'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/default'

components:
  schemas:
    IdentityProviders:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/IdentityProvider'
    IdentityProvider:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        enabled:
          type: boolean
        redirectUrl:
          type: string
        clientID:
          type: string
        clientSecret:
          type: string
        storeTokens:
          type: boolean
        storeTokensReadable:
          type: boolean
        acceptsPromptNone:
          type: boolean
        disableUserInfo:
          type: boolean
        trustEmail:
          type: boolean
        accountLinkingOnly:
          type: boolean
        syncMode:
          type: string
          enum:
            - import
        userCount:
          type: number
    Users:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      type: object
      required:
        - email
        - source
        - addedBy
      properties:
        id:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        joined:
          type: string
        lastLogin:
          type: string
        source:
          type: string
          examples: ["external", "internal"]
        groups:
          type: number
        roles:
          type: number
        permissions:
          type: number
        addedBy:
          type: string
          examples: ["okta"]
        certificate:
          type: string
    Groups:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    Group:
      type: string
      examples: ["global", "administrator", "viewer"]
    Roles:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role:
      type: string
      examples: ["global", "administrator", "viewer"]
    RoleObject:
      type: object
      required:
        - id
      properties:
        id:
          type: string
      examples: [{ id: "global" }, { id: "administrator" }, { id: "viewer" }]
    Entity:
      type: string
      examples: ["Controller", "Cloud"]
    Entitlements:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Entitlement"
    Entitlement:
      type: string
      examples: ["read", "destroy", "add-cloud"]
    EntityEntitlements:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              entity:
                $ref: "#/components/schemas/Entity"
              entitlement:
                $ref: "#/components/schemas/Entitlement"
    Resources:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
    Resource:
      type: object
      required:
        - id
        - name
        - entity
        - parent
      properties:
        id:
          type: string
        name:
          type: string
          examples: ["aws/eu-west"]
        entity:
          $ref: '#/components/schemas/Entity'
        parent:
          $ref: '#/components/schemas/Resource'
    Response:
      type: object
      required:
        - message
        - status
        - _meta
        - _links
      properties:
        message:
          type: string
        status:
          type: number
        _meta:
          type: object
          required:
            - page
            - size
            - total
          properties:
            page:
              type: number
            size:
              type: number
            total:
              type: number
        _links:
          type: object
          required:
            - next
          properties:
            next:
              type: object
              required:
                - href
              properties:
                href:
                  type: string
  parameters:
    PaginationSize:
      in: query
      name: size
      schema:
        type: number
        minimum: 1
        maximum: 100
      description: The number of records to return per response
    PaginationPage:
      in: query
      name: page
      schema:
        type: number
        minimum: 1
      description: The record offset to return results from
    FilterParam:
      in: query
      name: filter
      schema:
        type: string
      description: A string to filter results by
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            data: []
            status: 400
            message: 'Bad request'
            _meta:
              page: 0
              size: 0
              total: 0
            _links:
              next:
                href: ""
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            data: []
            status: 401
            message: 'Unauthorized'
            _meta:
              page: 0
              size: 0
              total: 0
            _links:
              next:
                href: ""
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            data: []
            status: 404
            message: 'Not found'
            _meta:
              page: 0
              size: 0
              total: 0
            _links:
              next:
                href: ""
    default:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          example:
            data: []
            status: 500
            message: 'Unexpected error'
            _meta:
              page: 0
              size: 0
              total: 0
            _links:
              next:
                href: ""
